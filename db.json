{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/dom_tree.jpg","path":"images/dom_tree.jpg","modified":0,"renderable":0},{"_id":"themes/indigo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1490026523518},{"_id":"themes/indigo/_config.yml","hash":"eafcbf0ed05cc8b5ac4ea6eed555bfbee1525dbb","modified":1490026523522},{"_id":"themes/indigo/package.json","hash":"f6e4c3326a222cd16a3fdb53656c90e0f9ab80ff","modified":1490026523522},{"_id":"themes/indigo/README.md","hash":"0d9232edd25c8de4070715cc900c93282f3a2dc2","modified":1490026523518},{"_id":"source/_posts/HTML-DOM.md","hash":"c31d076e45319b957af156eb88314bce3d60106b","modified":1490026545650},{"_id":"source/_posts/learning-vue.md","hash":"41e6a4f160478fce5bafb6a1e5b3c345630ed9d5","modified":1490026545650},{"_id":"source/_posts/Hexo+GithubPages博客.md","hash":"91448d2f614baba0a282c9ec5c3120dffc10f8e9","modified":1490026545646},{"_id":"source/_posts/resource-collection.md","hash":"f58b9f3cdbda95e1cf703d420ce3fdc033d4c0f6","modified":1490026545650},{"_id":"source/demo/index.md","hash":"0fc57d6ba79360471a42496008da3472675d5737","modified":1490026545658},{"_id":"source/categories/index.md","hash":"3b3274dba300e62bc5a3bd285f2226cb361f1961","modified":1490026545654},{"_id":"source/tags/index.md","hash":"3ea520ec0c6c5a729825ee7141d5b3d553aae22d","modified":1490026545654},{"_id":"source/images/dom_tree.jpg","hash":"3157943063b5c9ddabace937975021da1a846046","modified":1490026545654},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490026523522},{"_id":"themes/indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1490026523522},{"_id":"themes/indigo/.git/config","hash":"5d230b58d0037b2ed79a487a493d0b2562bddc13","modified":1490026523522},{"_id":"themes/indigo/.git/packed-refs","hash":"573c141947a2b233c2c30736f1a6800738f08ad3","modified":1490026523522},{"_id":"themes/indigo/.git/index","hash":"d7d5a031e41b34956c5173169be77a42ffbc7b37","modified":1490026523522},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1490026523558},{"_id":"themes/indigo/layout/categories.ejs","hash":"62488be0c5db55718594143a603b98ab84dd981c","modified":1490026523558},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1490026523558},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1490026523558},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1490026523562},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1490026523562},{"_id":"themes/indigo/scripts/plugins.js","hash":"a73fc4e34e761f019b90046c67d87b4fb44a4a20","modified":1490026523570},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1490026523562},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1490026523562},{"_id":"themes/indigo/layout/tags.ejs","hash":"8a31c65cfbef999da1c89d4ab2ae79970ee892ed","modified":1490026523562},{"_id":"themes/indigo/source/favicon.ico","hash":"ad235fedc6318ca3a0571c75eb61682d39bf4e24","modified":1490026523570},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490026523530},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1490026523526},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490026523526},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490026523526},{"_id":"themes/indigo/.git/logs/HEAD","hash":"b9ccace4807cbf2c5ac2c8e2ece96e35d49ba6d3","modified":1490026523558},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"18e361f260eb37a03069d6e3f6ccf0327fc5b75b","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"178d676eae4351774e7b9a121191a24fe5e46dae","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"af85a963119861ada586f3a32be3f951252976a2","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"c324ab0e8ac5475adaa506f424447e615c1f210c","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"da480b3f2f0f20e3a2d0db9a8371d13fb7cbfc6f","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"2c85661cd13dc8a153c328020ded60c8e7d36892","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"27f37ef30ea3651940be6f3f16f33ec492b252e5","modified":1490026523562},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"cd8e1ef7024a38b2ba1c9b3a4af12f54bb2d3d96","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1490026523566},{"_id":"themes/indigo/source/css/style.less","hash":"6e8609fa857be01f0206209a746c9872389c42c3","modified":1490026523574},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"39f61efa25fe3e423a21eb8acdae0a54a75e4ddf","modified":1490026523606},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1490026523606},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1490026523606},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1490026523606},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1490026523606},{"_id":"themes/indigo/source/img/wechat.png","hash":"1f503cadd42ffd0c4658f07cfa0ee6885e71257a","modified":1490026523602},{"_id":"themes/indigo/source/js/main.js","hash":"f7636eda390a77574e8df4b655eb0167f0386776","modified":1490026523606},{"_id":"themes/indigo/source/js/search.js","hash":"ae7c7c544dadebeb75b0d3cdad7d5bf9be16f637","modified":1490026523610},{"_id":"themes/indigo/source/js/main.min.js","hash":"3de7801b80c04432870bc270127d4102a10f45dd","modified":1490026523610},{"_id":"themes/indigo/source/js/search.min.js","hash":"b37a264a13785e08760cadee3309a172269dff63","modified":1490026523610},{"_id":"themes/indigo/source/js/embed.min.js","hash":"c2ad9ec865e531f47bb7db5cc032be44d7fe73a2","modified":1490026523606},{"_id":"themes/indigo/.git/objects/pack/pack-bf30d9587f9fb1554981421e49bf6d9f6b95c34d.idx","hash":"7c72055919d0da11e7135647483d68e5f8cea2ff","modified":1490026523534},{"_id":"themes/indigo/.git/refs/heads/card","hash":"56f3e67cad3a2d8b05ff3486efa17b63edc8b747","modified":1490026523522},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"1698376d86761762ccbeb9f5818a919437e7d13b","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"edc98c8015ab1deff32507d5f563f5cab0bd7f68","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"de23dfaaaed783f6ade86084fb7bcee531dce4d0","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"90d43c469931ce5db5f4bb66f0bd9378532aea30","modified":1490026523566},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"1fa66e299500927c3fda64b36c5a1fbd277fb696","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"18206ba13fcd0484e299aa61986afb0de9daec6d","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"210d63adf95a79f560e380b24bcdc25a3dd43077","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"ce764334c94e198fde3d222eadedc8813f026fca","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"1eb9620f1efc58b68a4f1dab10543741d5f142ef","modified":1490026523570},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1490026523570},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"a09aeb68646e6309d737dddea237a2d160608bbf","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"10c3e846afb891edf847cdc150bb842371458172","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"d320c0c5eb467695f8e3298ccc05926e1dcaf350","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"cf669f01788aac984cf295842c53d28844d256ba","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"6a7962f817199802f91d32d4e9bb87098683d84c","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"b95ac4f80d83595186e158a05f9e5551fb199171","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"caf782f681fc97ecdab34bc34e16e3353bcd1eb6","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"de48d76de6b99d7aa3f176cb1345b5bd1a6e3ec0","modified":1490026523574},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"1e2a57b7dc9ca3ef46d9966b49d0a8e614920c0a","modified":1490026523578},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"4218e03b97d12b006dc01c78f02f76a1e0daafb7","modified":1490026523578},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"9494e2183ce7a7a3f5742e3ba42b3514312a5006","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"eef9507d6fa7b7959b7a0b5b7df27a87879aa767","modified":1490026523578},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"5b4e813e3141d5509ee80fa319ae4cf3adfdd7da","modified":1490026523578},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"954e1c6af84c13940c8fd8c035bc4d2b273ab992","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"3325d75dde92d1ccfdf3e817794da4334c7c2133","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"60be551140481a529d531e1e8cfa1e90554fe8a2","modified":1490026523582},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"15e2bcbdf2ffb44707e4c7d0b6ba166fe1598ac0","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"4dc43ceeb73cf44133d79d13fd3b9fef1ddb287c","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"d73a12ca56cd710a13cb61074958c82a5cb95d63","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1490026523578},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"8cb596414557f55b2d2f24235171867467cb6b1a","modified":1490026523582},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1490026523578},{"_id":"themes/indigo/source/js/embed.js","hash":"0a99baa3a205f94b16ce9134fc14375178912401","modified":1490026523606},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"c19f5e28365c7ba6fa938591a8021da7d603253d","modified":1490026523578},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"b9ccace4807cbf2c5ac2c8e2ece96e35d49ba6d3","modified":1490026523558},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1490026523526},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1490026523594},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1490026523594},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1490026523594},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1490026523598},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1490026523598},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1490026523598},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1490026523602},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1490026523602},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1490026523602},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1490026523602},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1490026523602},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490026523586},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1490026523590},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1490026523594},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1490026523598},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1490026523602},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"b9ccace4807cbf2c5ac2c8e2ece96e35d49ba6d3","modified":1490026523558},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490026523586},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490026523586},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490026523586},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1490026523586},{"_id":"themes/indigo/.git/objects/pack/pack-bf30d9587f9fb1554981421e49bf6d9f6b95c34d.pack","hash":"446fdbc6961187d6c0ba033847f4645bb681abec","modified":1490026523554},{"_id":"public/atom.xml","hash":"4d4c7a9db76d8bf485bbf8f1a7bf890142e94dde","modified":1490026768213},{"_id":"public/content.json","hash":"e4dca1415dcd6ebc7f5c34895c66222a56c1dd05","modified":1490026768544},{"_id":"public/demo/index.html","hash":"36e3ee8a35598e8a2e4d9ac81bc5c1b62de29c79","modified":1490026768553},{"_id":"public/categories/index.html","hash":"d19663e5461c3a0a365098400e0e2a0b13a06fc7","modified":1490026768553},{"_id":"public/archives/index.html","hash":"d6b6430d76acc2e60d429742cb9ab308b7a36433","modified":1490026768554},{"_id":"public/archives/2016/index.html","hash":"ee3e49086e36206cfaf7f6c8edb4e14e7f449e7b","modified":1490026768554},{"_id":"public/archives/2016/12/index.html","hash":"91615a28ceaa9955566335e9aab084fde651dad1","modified":1490026768554},{"_id":"public/archives/2017/index.html","hash":"80964676ccdd8b2a1af5ccb21515cea9d04b30fa","modified":1490026768554},{"_id":"public/archives/2017/01/index.html","hash":"d4db75f0f995c02403cd03231ed7ee58d9b9718f","modified":1490026768554},{"_id":"public/categories/API/index.html","hash":"f3d24fa41fe9efba3ec135027e899e2d4719b310","modified":1490026768554},{"_id":"public/categories/Vue/index.html","hash":"08b5b7bb806faa48497f9cafbe0d0055f016338a","modified":1490026768555},{"_id":"public/categories/教程/index.html","hash":"587f03cd93d7652c742ec19a40d82c61dc531a67","modified":1490026768555},{"_id":"public/categories/资源/index.html","hash":"6770ca2e9b49811cd2e86d0f640372340aace217","modified":1490026768555},{"_id":"public/index.html","hash":"82d8e5f1971d9274d6dd14bf5e7c120eb7846865","modified":1490026768555},{"_id":"public/tags/API/index.html","hash":"d9fe495589d1bd67abad0d7188eedcd654e5c076","modified":1490026768555},{"_id":"public/tags/DOM/index.html","hash":"61b37cc6090fd56c0a3b37dc4fa8ad2a8bae28fd","modified":1490026768555},{"_id":"public/tags/Vue/index.html","hash":"0fd92e73dcd691f201cfad6aaa2f48cdf569a816","modified":1490026768556},{"_id":"public/tags/教程/index.html","hash":"b4582c0ce2e183757846ba71c26190b77e3904db","modified":1490026768556},{"_id":"public/tags/hexo/index.html","hash":"d6e5d16fa7949f43ee9a1a988670cbe92ea48400","modified":1490026768556},{"_id":"public/tags/资源/index.html","hash":"d343764d113fb5bbbe08ee42479a4d45f45479e7","modified":1490026768556},{"_id":"public/tags/index.html","hash":"71716d73beb6c840215567fb7ce14830c21e3658","modified":1490026768557},{"_id":"public/2017/01/03/learning-vue/index.html","hash":"381b70d6dd65b54c35fc21b9674c60564ce6279c","modified":1490026768557},{"_id":"public/2017/01/01/resource-collection/index.html","hash":"92da7c34a441237cab6d7ce02f1e95427ac3925f","modified":1490026768557},{"_id":"public/2016/12/28/HTML-DOM/index.html","hash":"8f24e7e3d0a405866bcaf02b86497afdf11f3ea6","modified":1490026768558},{"_id":"public/2016/12/26/Hexo+GithubPages博客/index.html","hash":"b563077df55f891ff8ced101576602b8cdc97b8d","modified":1490026768558},{"_id":"public/images/dom_tree.jpg","hash":"3157943063b5c9ddabace937975021da1a846046","modified":1490026768598},{"_id":"public/favicon.ico","hash":"ad235fedc6318ca3a0571c75eb61682d39bf4e24","modified":1490026768598},{"_id":"public/img/avatar.jpg","hash":"39f61efa25fe3e423a21eb8acdae0a54a75e4ddf","modified":1490026768598},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1490026768598},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1490026768598},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1490026768598},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1490026768599},{"_id":"public/img/wechat.png","hash":"1f503cadd42ffd0c4658f07cfa0ee6885e71257a","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1490026768599},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1490026768600},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1490026768600},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1490026768600},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1490026768600},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1490026768600},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1490026768600},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1490026768600},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490026768657},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490026768659},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1490026768659},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1490026768659},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1490026768659},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1490026768659},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1490026768659},{"_id":"public/js/search.js","hash":"ae7c7c544dadebeb75b0d3cdad7d5bf9be16f637","modified":1490026768665},{"_id":"public/js/main.min.js","hash":"3de7801b80c04432870bc270127d4102a10f45dd","modified":1490026768665},{"_id":"public/js/search.min.js","hash":"b37a264a13785e08760cadee3309a172269dff63","modified":1490026768665},{"_id":"public/js/main.js","hash":"f7636eda390a77574e8df4b655eb0167f0386776","modified":1490026768665},{"_id":"public/js/embed.min.js","hash":"c2ad9ec865e531f47bb7db5cc032be44d7fe73a2","modified":1490026768665},{"_id":"public/js/embed.js","hash":"0a99baa3a205f94b16ce9134fc14375178912401","modified":1490026768665},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490026768665},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490026768665},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490026768666},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1490026768672},{"_id":"public/css/style.css","hash":"9d123a899f98513baad85b0aef1e8cfd40ac2f2e","modified":1490026769070}],"Category":[{"name":"API","_id":"cj0ibgs0c00048n9zeqx5pf7v"},{"name":"Vue","_id":"cj0ibgs0o00098n9z69e235n6"},{"name":"教程","_id":"cj0ibgs0q000c8n9z4k0hvdv9"},{"name":"资源","_id":"cj0ibgs0r000h8n9z0qnbghup"}],"Data":[],"Page":[{"title":"一些Demo例子","date":"2017-01-04T03:24:41.000Z","comments":1,"_content":"1. [createjs-demo](/demo/createjs)  H5动画库\n2. [pageSlider-test](/demo/pageSlider-test) 微信滑动切换界面库\n3. [qrcode](/demo/qrcode) 在线生成二维码 ","source":"demo/index.md","raw":"---\ntitle: 一些Demo例子\ndate: 2017-01-04 11:24:41\ncomments : true\n---\n1. [createjs-demo](/demo/createjs)  H5动画库\n2. [pageSlider-test](/demo/pageSlider-test) 微信滑动切换界面库\n3. [qrcode](/demo/qrcode) 在线生成二维码 ","updated":"2017-03-20T16:15:45.658Z","path":"demo/index.html","layout":"page","_id":"cj0ibgs0700018n9zybnwjthr","content":"<ol>\n<li><a href=\"/demo/createjs\">createjs-demo</a>  H5动画库</li>\n<li><a href=\"/demo/pageSlider-test\">pageSlider-test</a> 微信滑动切换界面库</li>\n<li><a href=\"/demo/qrcode\">qrcode</a> 在线生成二维码 </li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><a href=\"/demo/createjs\">createjs-demo</a>  H5动画库</li>\n<li><a href=\"/demo/pageSlider-test\">pageSlider-test</a> 微信滑动切换界面库</li>\n<li><a href=\"/demo/qrcode\">qrcode</a> 在线生成二维码 </li>\n</ol>\n"},{"title":"categories","date":"2016-12-25T03:08:50.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-25 11:08:50\nlayout: categories\ncomments: false\n---\n","updated":"2017-03-20T16:15:45.654Z","path":"categories/index.html","_id":"cj0ibgs0b00038n9z8ua76z20","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-12-25T03:08:00.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-25 11:08:00\nlayout: tags\ncomments: false\n---\n","updated":"2017-03-20T16:15:45.654Z","path":"tags/index.html","_id":"cj0ibgs0i00078n9z6mtsugll","content":"","excerpt":"","more":""}],"Post":[{"title":"HTML DOM","date":"2016-12-28T14:15:45.000Z","_content":"## 简介\n#### 什么是DOM？\nDOM是W3C(万维网联盟)的标准，它定义了访问HTML和xml文档的标准：\n> DOM(文档对象模型)是中立于平台和语言 接口，它允许程序和脚步动态访问和更新 文档的内容、结构和样式。\n\nHTML DOM 提供了访问和操作HTML文档的接口和方法，或者说，HTML DOM 是关于如何获取、修改、添加或删除HTML元素的标准。\n\n#### DOM节点\n根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：\n+ 整个文档是一个文档节点\n+ 每个 HTML 元素是元素节点\n+ HTML 元素内的文本是文本节点\n+ 每个 HTML 属性是属性节点\n+ 注释是注释节点\n\nHTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：\n\n![image](/images/dom_tree.jpg)\n\n## 常用方法\n#### getElementById\ngetElementById() 方法返回带有指定 ID 的元素：\n`document.getElementById(\"intro\");`\n#### getElementsByTagName\ngetElementsByTagName() 返回带有指定标签名的所有元素,下面的例子返回包含文档中所有 <p> 元素的列表：\n`document.getElementsByTagName(\"p\");`\n#### getElementsByClassName\n如果您希望查找带有相同类名的所有 HTML 元素，请使用这个方法：\n`document.getElementsByClassName(\"intro\");`\n**注释**：getElementsByClassName() 在 Internet Explorer 5,6,7,8 中无效。如果要获取2个以上classname，可传入多个classname，每个用空格相隔。\n#### querySelector\n通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。\n`document.querySelector(\".test\")`\n**兼容性问题**：querySelector在ie8以下的浏览器不支持\n#### querySelectorAll\nquerySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，返回的是一个非即时的NodeList。\n`document.querySelectorAll(\"#test,.test\")`\n**兼容性问题**：querySelectorAll在ie8以下的浏览器不支持\n#### createElement\ncreateElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签:\n`var para=document.createElement(\"p\");`\n使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。\n#### createTextNode\n创建文本节点:\n`var node=document.createTextNode(\"This is new.\");`\ncreateTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中。\n#### cloneChild\ncloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下:\n```\nvar parent = document.getElementById(\"parentElement\");\nvar parent2 = parent.cloneNode(true);// 传入true\nparent2.id = \"parent2\";\n```\n#### appendChild\n追加到已有的元素上(末尾):\n```\nvar para = document.createElement(\"p\");\nvar element = document.getElementById(\"div1\");\nelement.appendChild(para);\n```\n#### insertBefore\n在某个元素前插入新元素\n```\nvar para = document.createElement(\"p\");\nvar element = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nelement.insertBefore(para,child);\n```\nparentNode.insertBefore(newNode,refNode)\nparentNode表示新节点被添加后的父节点\nnewNode表示要添加的节点\nrefNode表示参照节点，新节点会添加到这个节点之前\n#### removeChild\n删除已有的 HTML 元素\n```\nvar parent = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nparent.removeChild(child);\n```\n找到您需要删除的子元素，然后使用 parentNode 属性来查找其父元素：\n```\nvar child = document.getElementById(\"p1\");\nchild.parentNode.removeChild(child);\n```\n#### replaceChild\n替换 HTML 元素\n```\nvar para = document.createElement(\"p\");\nvar element = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nparent.replaceChild(para,child);\n```\nparent.replaceNode(newChild,oldChild);\nnewChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置\noldChild是被替换的节点\n#### setAttribute\nsetAttribute根据名称和值修改元素的特性:\n`element.setAttribute(name, value);`\n其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。\n如果元素本身包含指定的特性名为属性，则可以直接访问属性进行赋值，比如下面两条代码是等价的：\n```\nelement.setAttribute(\"id\",\"test\");\nelement.id = \"test\";\n```\n#### getAttribute\ngetAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串:\n`var value = element.getAttribute(\"id\");`\n#### getBoundingClientRect\ngetBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置:\n`var clientRect = element.getBoundingClientRect();`\nclientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。具体参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect)\n\n## 属性\n#### innerHTML\ninnerHTML 属性可用于获取或改变任意 HTML 元素，包括 <html> 和 <body>：\n```\nvar txt=document.getElementById(\"intro\").innerHTML;\ndocument.write(txt);\n```\n#### nodeName\nnodeName 属性规定节点的名称:\n+ nodeName 是只读的\n+ 元素节点的 nodeName 与标签名相同\n+ 属性节点的 nodeName 与属性名相同\n+ 文本节点的 nodeName 始终是 #text\n+ 文档节点的 nodeName 始终是 #document\n\n**注释**：nodeName 始终包含 HTML 元素的大写字母标签名。\n\n#### nodeValue\nnodeValue 属性规定节点的值。\n+ 元素节点的 nodeValue 是 undefined 或 null\n+ 文本节点的 nodeValue 是文本本身\n+ 属性节点的 nodeValue 是属性值\n\n#### nodeType\nnodeType 属性返回节点的类型。nodeType 是只读的, 比较重要的节点类型有：\n\n| 元素类型 | nodeType |\n|:---|:---:|\n|元素|1|\n|属性|2|\n|文本|3|\n|注释|8|\n|文档|9|\n\n#### style\n通过 HTML DOM，您能够访问或修改 HTML 元素的样式对象:\n`document.getElementById(\"p2\").style.color=\"blue\";`\n\n## DOM 导航\n**HTML DOM 节点列表**\ngetElementsByTagName() 方法返回节点列表。节点列表是一个节点数组，可以通过下标号访问这些节点。如需访问第二个 <p>，您可以这么写：\n```\nvar x = document.getElementsByTagName(\"p\");\ny = x[1];\n```\n\n**HTML DOM 节点列表长度**\nlength 属性定义节点列表中节点的数量:\n```\nx = document.getElementsByTagName(\"p\");\nfor (i=0;i<x.length;i++)\n{\n    document.write(x[i].innerHTML);\n    document.write(\"<br />\");\n}\n```\n\n**导航节点关系**\n您能够使用三个节点属性：parentNode、firstChild 以及 lastChild ，在文档结构中进行导航\n\n**childNodes**\n获取子节点：\n```\nvar txt = document.getElementById(\"intro\").childNodes[0].nodeValue;\ndocument.write(txt);\n```\n## 节点关系型API\n在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。\n#### 父关系型api\nparentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。\nparentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null\n#### 兄弟关系型api\npreviousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。\npreviousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。\nnextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。\nnextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。\n#### 子关系型api\nchildNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。\nchildren：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。\nfirstNode：第一个子节点\nlastNode：最后一个子节点\nhasChildNodes方法：可以用来判断是否包含子节点。\n\n## 参考\n[Javascript操作DOM常用API总结](http://web.jobbole.com/84364/)  \n[W3C HTML DOM](http://www.w3school.com.cn/htmldom/)  \n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect)\n","source":"_posts/HTML-DOM.md","raw":"---\ntitle: HTML DOM\ndate: 2016-12-28 22:15:45\ncategories: [API]\ntags: [API, DOM]\n---\n## 简介\n#### 什么是DOM？\nDOM是W3C(万维网联盟)的标准，它定义了访问HTML和xml文档的标准：\n> DOM(文档对象模型)是中立于平台和语言 接口，它允许程序和脚步动态访问和更新 文档的内容、结构和样式。\n\nHTML DOM 提供了访问和操作HTML文档的接口和方法，或者说，HTML DOM 是关于如何获取、修改、添加或删除HTML元素的标准。\n\n#### DOM节点\n根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：\n+ 整个文档是一个文档节点\n+ 每个 HTML 元素是元素节点\n+ HTML 元素内的文本是文本节点\n+ 每个 HTML 属性是属性节点\n+ 注释是注释节点\n\nHTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：\n\n![image](/images/dom_tree.jpg)\n\n## 常用方法\n#### getElementById\ngetElementById() 方法返回带有指定 ID 的元素：\n`document.getElementById(\"intro\");`\n#### getElementsByTagName\ngetElementsByTagName() 返回带有指定标签名的所有元素,下面的例子返回包含文档中所有 <p> 元素的列表：\n`document.getElementsByTagName(\"p\");`\n#### getElementsByClassName\n如果您希望查找带有相同类名的所有 HTML 元素，请使用这个方法：\n`document.getElementsByClassName(\"intro\");`\n**注释**：getElementsByClassName() 在 Internet Explorer 5,6,7,8 中无效。如果要获取2个以上classname，可传入多个classname，每个用空格相隔。\n#### querySelector\n通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。\n`document.querySelector(\".test\")`\n**兼容性问题**：querySelector在ie8以下的浏览器不支持\n#### querySelectorAll\nquerySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，返回的是一个非即时的NodeList。\n`document.querySelectorAll(\"#test,.test\")`\n**兼容性问题**：querySelectorAll在ie8以下的浏览器不支持\n#### createElement\ncreateElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签:\n`var para=document.createElement(\"p\");`\n使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。\n#### createTextNode\n创建文本节点:\n`var node=document.createTextNode(\"This is new.\");`\ncreateTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中。\n#### cloneChild\ncloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下:\n```\nvar parent = document.getElementById(\"parentElement\");\nvar parent2 = parent.cloneNode(true);// 传入true\nparent2.id = \"parent2\";\n```\n#### appendChild\n追加到已有的元素上(末尾):\n```\nvar para = document.createElement(\"p\");\nvar element = document.getElementById(\"div1\");\nelement.appendChild(para);\n```\n#### insertBefore\n在某个元素前插入新元素\n```\nvar para = document.createElement(\"p\");\nvar element = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nelement.insertBefore(para,child);\n```\nparentNode.insertBefore(newNode,refNode)\nparentNode表示新节点被添加后的父节点\nnewNode表示要添加的节点\nrefNode表示参照节点，新节点会添加到这个节点之前\n#### removeChild\n删除已有的 HTML 元素\n```\nvar parent = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nparent.removeChild(child);\n```\n找到您需要删除的子元素，然后使用 parentNode 属性来查找其父元素：\n```\nvar child = document.getElementById(\"p1\");\nchild.parentNode.removeChild(child);\n```\n#### replaceChild\n替换 HTML 元素\n```\nvar para = document.createElement(\"p\");\nvar element = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nparent.replaceChild(para,child);\n```\nparent.replaceNode(newChild,oldChild);\nnewChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置\noldChild是被替换的节点\n#### setAttribute\nsetAttribute根据名称和值修改元素的特性:\n`element.setAttribute(name, value);`\n其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。\n如果元素本身包含指定的特性名为属性，则可以直接访问属性进行赋值，比如下面两条代码是等价的：\n```\nelement.setAttribute(\"id\",\"test\");\nelement.id = \"test\";\n```\n#### getAttribute\ngetAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串:\n`var value = element.getAttribute(\"id\");`\n#### getBoundingClientRect\ngetBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置:\n`var clientRect = element.getBoundingClientRect();`\nclientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。具体参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect)\n\n## 属性\n#### innerHTML\ninnerHTML 属性可用于获取或改变任意 HTML 元素，包括 <html> 和 <body>：\n```\nvar txt=document.getElementById(\"intro\").innerHTML;\ndocument.write(txt);\n```\n#### nodeName\nnodeName 属性规定节点的名称:\n+ nodeName 是只读的\n+ 元素节点的 nodeName 与标签名相同\n+ 属性节点的 nodeName 与属性名相同\n+ 文本节点的 nodeName 始终是 #text\n+ 文档节点的 nodeName 始终是 #document\n\n**注释**：nodeName 始终包含 HTML 元素的大写字母标签名。\n\n#### nodeValue\nnodeValue 属性规定节点的值。\n+ 元素节点的 nodeValue 是 undefined 或 null\n+ 文本节点的 nodeValue 是文本本身\n+ 属性节点的 nodeValue 是属性值\n\n#### nodeType\nnodeType 属性返回节点的类型。nodeType 是只读的, 比较重要的节点类型有：\n\n| 元素类型 | nodeType |\n|:---|:---:|\n|元素|1|\n|属性|2|\n|文本|3|\n|注释|8|\n|文档|9|\n\n#### style\n通过 HTML DOM，您能够访问或修改 HTML 元素的样式对象:\n`document.getElementById(\"p2\").style.color=\"blue\";`\n\n## DOM 导航\n**HTML DOM 节点列表**\ngetElementsByTagName() 方法返回节点列表。节点列表是一个节点数组，可以通过下标号访问这些节点。如需访问第二个 <p>，您可以这么写：\n```\nvar x = document.getElementsByTagName(\"p\");\ny = x[1];\n```\n\n**HTML DOM 节点列表长度**\nlength 属性定义节点列表中节点的数量:\n```\nx = document.getElementsByTagName(\"p\");\nfor (i=0;i<x.length;i++)\n{\n    document.write(x[i].innerHTML);\n    document.write(\"<br />\");\n}\n```\n\n**导航节点关系**\n您能够使用三个节点属性：parentNode、firstChild 以及 lastChild ，在文档结构中进行导航\n\n**childNodes**\n获取子节点：\n```\nvar txt = document.getElementById(\"intro\").childNodes[0].nodeValue;\ndocument.write(txt);\n```\n## 节点关系型API\n在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。\n#### 父关系型api\nparentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。\nparentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null\n#### 兄弟关系型api\npreviousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。\npreviousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。\nnextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。\nnextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。\n#### 子关系型api\nchildNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。\nchildren：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。\nfirstNode：第一个子节点\nlastNode：最后一个子节点\nhasChildNodes方法：可以用来判断是否包含子节点。\n\n## 参考\n[Javascript操作DOM常用API总结](http://web.jobbole.com/84364/)  \n[W3C HTML DOM](http://www.w3school.com.cn/htmldom/)  \n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect)\n","slug":"HTML-DOM","published":1,"updated":"2017-03-20T16:15:45.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ibgs0300008n9zl0ko7rip","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h4 id=\"什么是DOM？\"><a href=\"#什么是DOM？\" class=\"headerlink\" title=\"什么是DOM？\"></a>什么是DOM？</h4><p>DOM是W3C(万维网联盟)的标准，它定义了访问HTML和xml文档的标准：</p>\n<blockquote>\n<p>DOM(文档对象模型)是中立于平台和语言 接口，它允许程序和脚步动态访问和更新 文档的内容、结构和样式。</p>\n</blockquote>\n<p>HTML DOM 提供了访问和操作HTML文档的接口和方法，或者说，HTML DOM 是关于如何获取、修改、添加或删除HTML元素的标准。</p>\n<h4 id=\"DOM节点\"><a href=\"#DOM节点\" class=\"headerlink\" title=\"DOM节点\"></a>DOM节点</h4><p>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：</p>\n<ul>\n<li>整个文档是一个文档节点</li>\n<li>每个 HTML 元素是元素节点</li>\n<li>HTML 元素内的文本是文本节点</li>\n<li>每个 HTML 属性是属性节点</li>\n<li>注释是注释节点</li>\n</ul>\n<p>HTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/dom_tree.jpg\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><h4 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById\"></a>getElementById</h4><p>getElementById() 方法返回带有指定 ID 的元素：<br><code>document.getElementById(&quot;intro&quot;);</code></p>\n<h4 id=\"getElementsByTagName\"><a href=\"#getElementsByTagName\" class=\"headerlink\" title=\"getElementsByTagName\"></a>getElementsByTagName</h4><p>getElementsByTagName() 返回带有指定标签名的所有元素,下面的例子返回包含文档中所有 </p><p> 元素的列表：<br><code>document.getElementsByTagName(&quot;p&quot;);</code></p>\n<h4 id=\"getElementsByClassName\"><a href=\"#getElementsByClassName\" class=\"headerlink\" title=\"getElementsByClassName\"></a>getElementsByClassName</h4><p>如果您希望查找带有相同类名的所有 HTML 元素，请使用这个方法：<br><code>document.getElementsByClassName(&quot;intro&quot;);</code><br><strong>注释</strong>：getElementsByClassName() 在 Internet Explorer 5,6,7,8 中无效。如果要获取2个以上classname，可传入多个classname，每个用空格相隔。</p>\n<h4 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector\"></a>querySelector</h4><p>通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。<br><code>document.querySelector(&quot;.test&quot;)</code><br><strong>兼容性问题</strong>：querySelector在ie8以下的浏览器不支持</p>\n<h4 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll\"></a>querySelectorAll</h4><p>querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，返回的是一个非即时的NodeList。<br><code>document.querySelectorAll(&quot;#test,.test&quot;)</code><br><strong>兼容性问题</strong>：querySelectorAll在ie8以下的浏览器不支持</p>\n<h4 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a>createElement</h4><p>createElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签:<br><code>var para=document.createElement(&quot;p&quot;);</code><br>使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。</p>\n<h4 id=\"createTextNode\"><a href=\"#createTextNode\" class=\"headerlink\" title=\"createTextNode\"></a>createTextNode</h4><p>创建文本节点:<br><code>var node=document.createTextNode(&quot;This is new.&quot;);</code><br>createTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中。</p>\n<h4 id=\"cloneChild\"><a href=\"#cloneChild\" class=\"headerlink\" title=\"cloneChild\"></a>cloneChild</h4><p>cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var parent = document.getElementById(&quot;parentElement&quot;);</div><div class=\"line\">var parent2 = parent.cloneNode(true);// 传入true</div><div class=\"line\">parent2.id = &quot;parent2&quot;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"appendChild\"><a href=\"#appendChild\" class=\"headerlink\" title=\"appendChild\"></a>appendChild</h4><p>追加到已有的元素上(末尾):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var para = document.createElement(&quot;p&quot;);</div><div class=\"line\">var element = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">element.appendChild(para);</div></pre></td></tr></table></figure></p>\n<h4 id=\"insertBefore\"><a href=\"#insertBefore\" class=\"headerlink\" title=\"insertBefore\"></a>insertBefore</h4><p>在某个元素前插入新元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var para = document.createElement(&quot;p&quot;);</div><div class=\"line\">var element = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">element.insertBefore(para,child);</div></pre></td></tr></table></figure></p>\n<p>parentNode.insertBefore(newNode,refNode)<br>parentNode表示新节点被添加后的父节点<br>newNode表示要添加的节点<br>refNode表示参照节点，新节点会添加到这个节点之前</p>\n<h4 id=\"removeChild\"><a href=\"#removeChild\" class=\"headerlink\" title=\"removeChild\"></a>removeChild</h4><p>删除已有的 HTML 元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var parent = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">parent.removeChild(child);</div></pre></td></tr></table></figure></p>\n<p>找到您需要删除的子元素，然后使用 parentNode 属性来查找其父元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">child.parentNode.removeChild(child);</div></pre></td></tr></table></figure></p>\n<h4 id=\"replaceChild\"><a href=\"#replaceChild\" class=\"headerlink\" title=\"replaceChild\"></a>replaceChild</h4><p>替换 HTML 元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var para = document.createElement(&quot;p&quot;);</div><div class=\"line\">var element = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">parent.replaceChild(para,child);</div></pre></td></tr></table></figure></p>\n<p>parent.replaceNode(newChild,oldChild);<br>newChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置<br>oldChild是被替换的节点</p>\n<h4 id=\"setAttribute\"><a href=\"#setAttribute\" class=\"headerlink\" title=\"setAttribute\"></a>setAttribute</h4><p>setAttribute根据名称和值修改元素的特性:<br><code>element.setAttribute(name, value);</code><br>其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。<br>如果元素本身包含指定的特性名为属性，则可以直接访问属性进行赋值，比如下面两条代码是等价的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.setAttribute(&quot;id&quot;,&quot;test&quot;);</div><div class=\"line\">element.id = &quot;test&quot;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"getAttribute\"><a href=\"#getAttribute\" class=\"headerlink\" title=\"getAttribute\"></a>getAttribute</h4><p>getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串:<br><code>var value = element.getAttribute(&quot;id&quot;);</code></p>\n<h4 id=\"getBoundingClientRect\"><a href=\"#getBoundingClientRect\" class=\"headerlink\" title=\"getBoundingClientRect\"></a>getBoundingClientRect</h4><p>getBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置:<br><code>var clientRect = element.getBoundingClientRect();</code><br>clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。具体参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" target=\"_blank\" rel=\"external\">MDN</a></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h4 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h4><p>innerHTML 属性可用于获取或改变任意 HTML 元素，包括 <html> 和 <body>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var txt=document.getElementById(&quot;intro&quot;).innerHTML;</div><div class=\"line\">document.write(txt);</div></pre></td></tr></table></figure></body></html></p>\n<h4 id=\"nodeName\"><a href=\"#nodeName\" class=\"headerlink\" title=\"nodeName\"></a>nodeName</h4><p>nodeName 属性规定节点的名称:</p>\n<ul>\n<li>nodeName 是只读的</li>\n<li>元素节点的 nodeName 与标签名相同</li>\n<li>属性节点的 nodeName 与属性名相同</li>\n<li>文本节点的 nodeName 始终是 #text</li>\n<li>文档节点的 nodeName 始终是 #document</li>\n</ul>\n<p><strong>注释</strong>：nodeName 始终包含 HTML 元素的大写字母标签名。</p>\n<h4 id=\"nodeValue\"><a href=\"#nodeValue\" class=\"headerlink\" title=\"nodeValue\"></a>nodeValue</h4><p>nodeValue 属性规定节点的值。</p>\n<ul>\n<li>元素节点的 nodeValue 是 undefined 或 null</li>\n<li>文本节点的 nodeValue 是文本本身</li>\n<li>属性节点的 nodeValue 是属性值</li>\n</ul>\n<h4 id=\"nodeType\"><a href=\"#nodeType\" class=\"headerlink\" title=\"nodeType\"></a>nodeType</h4><p>nodeType 属性返回节点的类型。nodeType 是只读的, 比较重要的节点类型有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">元素类型</th>\n<th style=\"text-align:center\">nodeType</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">元素</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">属性</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文本</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文档</td>\n<td style=\"text-align:center\">9</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h4><p>通过 HTML DOM，您能够访问或修改 HTML 元素的样式对象:<br><code>document.getElementById(&quot;p2&quot;).style.color=&quot;blue&quot;;</code></p>\n<h2 id=\"DOM-导航\"><a href=\"#DOM-导航\" class=\"headerlink\" title=\"DOM 导航\"></a>DOM 导航</h2><p><strong>HTML DOM 节点列表</strong><br>getElementsByTagName() 方法返回节点列表。节点列表是一个节点数组，可以通过下标号访问这些节点。如需访问第二个 </p><p>，您可以这么写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var x = document.getElementsByTagName(&quot;p&quot;);</div><div class=\"line\">y = x[1];</div></pre></td></tr></table></figure></p>\n<p><strong>HTML DOM 节点列表长度</strong><br>length 属性定义节点列表中节点的数量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = document.getElementsByTagName(&quot;p&quot;);</div><div class=\"line\">for (i=0;i&lt;x.length;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    document.write(x[i].innerHTML);</div><div class=\"line\">    document.write(&quot;&lt;br /&gt;&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>导航节点关系</strong><br>您能够使用三个节点属性：parentNode、firstChild 以及 lastChild ，在文档结构中进行导航</p>\n<p><strong>childNodes</strong><br>获取子节点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var txt = document.getElementById(&quot;intro&quot;).childNodes[0].nodeValue;</div><div class=\"line\">document.write(txt);</div></pre></td></tr></table></figure></p>\n<h2 id=\"节点关系型API\"><a href=\"#节点关系型API\" class=\"headerlink\" title=\"节点关系型API\"></a>节点关系型API</h2><p>在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。</p>\n<h4 id=\"父关系型api\"><a href=\"#父关系型api\" class=\"headerlink\" title=\"父关系型api\"></a>父关系型api</h4><p>parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。<br>parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null</p>\n<h4 id=\"兄弟关系型api\"><a href=\"#兄弟关系型api\" class=\"headerlink\" title=\"兄弟关系型api\"></a>兄弟关系型api</h4><p>previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。<br>previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。<br>nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。<br>nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p>\n<h4 id=\"子关系型api\"><a href=\"#子关系型api\" class=\"headerlink\" title=\"子关系型api\"></a>子关系型api</h4><p>childNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。<br>children：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。<br>firstNode：第一个子节点<br>lastNode：最后一个子节点<br>hasChildNodes方法：可以用来判断是否包含子节点。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://web.jobbole.com/84364/\" target=\"_blank\" rel=\"external\">Javascript操作DOM常用API总结</a><br><a href=\"http://www.w3school.com.cn/htmldom/\" target=\"_blank\" rel=\"external\">W3C HTML DOM</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" target=\"_blank\" rel=\"external\">MDN</a></p>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h4 id=\"什么是DOM？\"><a href=\"#什么是DOM？\" class=\"headerlink\" title=\"什么是DOM？\"></a>什么是DOM？</h4><p>DOM是W3C(万维网联盟)的标准，它定义了访问HTML和xml文档的标准：</p>\n<blockquote>\n<p>DOM(文档对象模型)是中立于平台和语言 接口，它允许程序和脚步动态访问和更新 文档的内容、结构和样式。</p>\n</blockquote>\n<p>HTML DOM 提供了访问和操作HTML文档的接口和方法，或者说，HTML DOM 是关于如何获取、修改、添加或删除HTML元素的标准。</p>\n<h4 id=\"DOM节点\"><a href=\"#DOM节点\" class=\"headerlink\" title=\"DOM节点\"></a>DOM节点</h4><p>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：</p>\n<ul>\n<li>整个文档是一个文档节点</li>\n<li>每个 HTML 元素是元素节点</li>\n<li>HTML 元素内的文本是文本节点</li>\n<li>每个 HTML 属性是属性节点</li>\n<li>注释是注释节点</li>\n</ul>\n<p>HTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/dom_tree.jpg\" alt=\"image\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><h4 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById\"></a>getElementById</h4><p>getElementById() 方法返回带有指定 ID 的元素：<br><code>document.getElementById(&quot;intro&quot;);</code></p>\n<h4 id=\"getElementsByTagName\"><a href=\"#getElementsByTagName\" class=\"headerlink\" title=\"getElementsByTagName\"></a>getElementsByTagName</h4><p>getElementsByTagName() 返回带有指定标签名的所有元素,下面的例子返回包含文档中所有 <p> 元素的列表：<br><code>document.getElementsByTagName(&quot;p&quot;);</code></p>\n<h4 id=\"getElementsByClassName\"><a href=\"#getElementsByClassName\" class=\"headerlink\" title=\"getElementsByClassName\"></a>getElementsByClassName</h4><p>如果您希望查找带有相同类名的所有 HTML 元素，请使用这个方法：<br><code>document.getElementsByClassName(&quot;intro&quot;);</code><br><strong>注释</strong>：getElementsByClassName() 在 Internet Explorer 5,6,7,8 中无效。如果要获取2个以上classname，可传入多个classname，每个用空格相隔。</p>\n<h4 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector\"></a>querySelector</h4><p>通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。<br><code>document.querySelector(&quot;.test&quot;)</code><br><strong>兼容性问题</strong>：querySelector在ie8以下的浏览器不支持</p>\n<h4 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll\"></a>querySelectorAll</h4><p>querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，返回的是一个非即时的NodeList。<br><code>document.querySelectorAll(&quot;#test,.test&quot;)</code><br><strong>兼容性问题</strong>：querySelectorAll在ie8以下的浏览器不支持</p>\n<h4 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a>createElement</h4><p>createElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签:<br><code>var para=document.createElement(&quot;p&quot;);</code><br>使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。</p>\n<h4 id=\"createTextNode\"><a href=\"#createTextNode\" class=\"headerlink\" title=\"createTextNode\"></a>createTextNode</h4><p>创建文本节点:<br><code>var node=document.createTextNode(&quot;This is new.&quot;);</code><br>createTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中。</p>\n<h4 id=\"cloneChild\"><a href=\"#cloneChild\" class=\"headerlink\" title=\"cloneChild\"></a>cloneChild</h4><p>cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var parent = document.getElementById(&quot;parentElement&quot;);</div><div class=\"line\">var parent2 = parent.cloneNode(true);// 传入true</div><div class=\"line\">parent2.id = &quot;parent2&quot;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"appendChild\"><a href=\"#appendChild\" class=\"headerlink\" title=\"appendChild\"></a>appendChild</h4><p>追加到已有的元素上(末尾):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var para = document.createElement(&quot;p&quot;);</div><div class=\"line\">var element = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">element.appendChild(para);</div></pre></td></tr></table></figure></p>\n<h4 id=\"insertBefore\"><a href=\"#insertBefore\" class=\"headerlink\" title=\"insertBefore\"></a>insertBefore</h4><p>在某个元素前插入新元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var para = document.createElement(&quot;p&quot;);</div><div class=\"line\">var element = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">element.insertBefore(para,child);</div></pre></td></tr></table></figure></p>\n<p>parentNode.insertBefore(newNode,refNode)<br>parentNode表示新节点被添加后的父节点<br>newNode表示要添加的节点<br>refNode表示参照节点，新节点会添加到这个节点之前</p>\n<h4 id=\"removeChild\"><a href=\"#removeChild\" class=\"headerlink\" title=\"removeChild\"></a>removeChild</h4><p>删除已有的 HTML 元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var parent = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">parent.removeChild(child);</div></pre></td></tr></table></figure></p>\n<p>找到您需要删除的子元素，然后使用 parentNode 属性来查找其父元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">child.parentNode.removeChild(child);</div></pre></td></tr></table></figure></p>\n<h4 id=\"replaceChild\"><a href=\"#replaceChild\" class=\"headerlink\" title=\"replaceChild\"></a>replaceChild</h4><p>替换 HTML 元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var para = document.createElement(&quot;p&quot;);</div><div class=\"line\">var element = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var child = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">parent.replaceChild(para,child);</div></pre></td></tr></table></figure></p>\n<p>parent.replaceNode(newChild,oldChild);<br>newChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置<br>oldChild是被替换的节点</p>\n<h4 id=\"setAttribute\"><a href=\"#setAttribute\" class=\"headerlink\" title=\"setAttribute\"></a>setAttribute</h4><p>setAttribute根据名称和值修改元素的特性:<br><code>element.setAttribute(name, value);</code><br>其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。<br>如果元素本身包含指定的特性名为属性，则可以直接访问属性进行赋值，比如下面两条代码是等价的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.setAttribute(&quot;id&quot;,&quot;test&quot;);</div><div class=\"line\">element.id = &quot;test&quot;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"getAttribute\"><a href=\"#getAttribute\" class=\"headerlink\" title=\"getAttribute\"></a>getAttribute</h4><p>getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串:<br><code>var value = element.getAttribute(&quot;id&quot;);</code></p>\n<h4 id=\"getBoundingClientRect\"><a href=\"#getBoundingClientRect\" class=\"headerlink\" title=\"getBoundingClientRect\"></a>getBoundingClientRect</h4><p>getBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置:<br><code>var clientRect = element.getBoundingClientRect();</code><br>clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。具体参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\">MDN</a></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h4 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h4><p>innerHTML 属性可用于获取或改变任意 HTML 元素，包括 <html> 和 <body>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var txt=document.getElementById(&quot;intro&quot;).innerHTML;</div><div class=\"line\">document.write(txt);</div></pre></td></tr></table></figure></p>\n<h4 id=\"nodeName\"><a href=\"#nodeName\" class=\"headerlink\" title=\"nodeName\"></a>nodeName</h4><p>nodeName 属性规定节点的名称:</p>\n<ul>\n<li>nodeName 是只读的</li>\n<li>元素节点的 nodeName 与标签名相同</li>\n<li>属性节点的 nodeName 与属性名相同</li>\n<li>文本节点的 nodeName 始终是 #text</li>\n<li>文档节点的 nodeName 始终是 #document</li>\n</ul>\n<p><strong>注释</strong>：nodeName 始终包含 HTML 元素的大写字母标签名。</p>\n<h4 id=\"nodeValue\"><a href=\"#nodeValue\" class=\"headerlink\" title=\"nodeValue\"></a>nodeValue</h4><p>nodeValue 属性规定节点的值。</p>\n<ul>\n<li>元素节点的 nodeValue 是 undefined 或 null</li>\n<li>文本节点的 nodeValue 是文本本身</li>\n<li>属性节点的 nodeValue 是属性值</li>\n</ul>\n<h4 id=\"nodeType\"><a href=\"#nodeType\" class=\"headerlink\" title=\"nodeType\"></a>nodeType</h4><p>nodeType 属性返回节点的类型。nodeType 是只读的, 比较重要的节点类型有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">元素类型</th>\n<th style=\"text-align:center\">nodeType</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">元素</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">属性</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文本</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文档</td>\n<td style=\"text-align:center\">9</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h4><p>通过 HTML DOM，您能够访问或修改 HTML 元素的样式对象:<br><code>document.getElementById(&quot;p2&quot;).style.color=&quot;blue&quot;;</code></p>\n<h2 id=\"DOM-导航\"><a href=\"#DOM-导航\" class=\"headerlink\" title=\"DOM 导航\"></a>DOM 导航</h2><p><strong>HTML DOM 节点列表</strong><br>getElementsByTagName() 方法返回节点列表。节点列表是一个节点数组，可以通过下标号访问这些节点。如需访问第二个 <p>，您可以这么写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var x = document.getElementsByTagName(&quot;p&quot;);</div><div class=\"line\">y = x[1];</div></pre></td></tr></table></figure></p>\n<p><strong>HTML DOM 节点列表长度</strong><br>length 属性定义节点列表中节点的数量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = document.getElementsByTagName(&quot;p&quot;);</div><div class=\"line\">for (i=0;i&lt;x.length;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    document.write(x[i].innerHTML);</div><div class=\"line\">    document.write(&quot;&lt;br /&gt;&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>导航节点关系</strong><br>您能够使用三个节点属性：parentNode、firstChild 以及 lastChild ，在文档结构中进行导航</p>\n<p><strong>childNodes</strong><br>获取子节点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var txt = document.getElementById(&quot;intro&quot;).childNodes[0].nodeValue;</div><div class=\"line\">document.write(txt);</div></pre></td></tr></table></figure></p>\n<h2 id=\"节点关系型API\"><a href=\"#节点关系型API\" class=\"headerlink\" title=\"节点关系型API\"></a>节点关系型API</h2><p>在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。</p>\n<h4 id=\"父关系型api\"><a href=\"#父关系型api\" class=\"headerlink\" title=\"父关系型api\"></a>父关系型api</h4><p>parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。<br>parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null</p>\n<h4 id=\"兄弟关系型api\"><a href=\"#兄弟关系型api\" class=\"headerlink\" title=\"兄弟关系型api\"></a>兄弟关系型api</h4><p>previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。<br>previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。<br>nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。<br>nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p>\n<h4 id=\"子关系型api\"><a href=\"#子关系型api\" class=\"headerlink\" title=\"子关系型api\"></a>子关系型api</h4><p>childNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。<br>children：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。<br>firstNode：第一个子节点<br>lastNode：最后一个子节点<br>hasChildNodes方法：可以用来判断是否包含子节点。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://web.jobbole.com/84364/\">Javascript操作DOM常用API总结</a><br><a href=\"http://www.w3school.com.cn/htmldom/\">W3C HTML DOM</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\">MDN</a></p>\n"},{"title":"Vue学习笔记","date":"2017-01-03T15:53:19.000Z","_content":"## 介绍\n　　Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。\n　　Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n　　组件思想：将界面元素抽象为一个独立可复用的小组件，父组件包含若干个子组件，用这些组件构建大型的应用，因此任何一个应用界面都可以抽象为组件树。\n![组件思想](/images/components.png)\n　　每个Vue实例在被创建之前都要经过一系列的初始化过程，例如，实例需要配置数据观测、编译模版、挂载实例到DOM、数据变化时更新DOM等，在实例的生命周期的不同阶段会调用不同的回调函数，用户可以在这些回调函数中定义自己的程序处理逻辑。\n　　生命周期图示：\n![生命周期](/images/lifecycle.png)\n## 安装\n**直接下载**\n直接下载并在html中用script应用，Vue会被注册为一个全局变量。\n[开发版本](http://vuejs.org/js/vue.js) 包含了完整的警告和调试模式\n[生成版本](http://vuejs.org/js/vue.min.js) 删除警告\n\n**NPM**\n通过npm安装最新稳定版本\n`$ npm install vue `\n\n**命令行工具**\nvue.js提供官方的命令行工具，可以快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目。\n```\n# 全局安装 vue-cli\n$ npm install -g vue-cli\n# 创建一个基于 webpack 模板的新项目\n$ vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n$ npm install\n$ npm run dev\n\n# 其他命令\n# 可以查看官方提供的模版， 如webpack-simple、bowserify、week等\n$ vue list\n```\n有前端基础的推荐使用命令行工具，它能够方便初学者快速构建各种框架工程，免去自己去查找资料的麻烦\n\n## 简单使用\n### 插值\n数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：\n`<span>Message: { {msg}}</span>`\n\n### 计算属性\n计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 message 没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n```\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n\n### 指令\n#### 绑定属性\n一些指令能接受一个“参数”，在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：\n```\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\n```\n\n**Class与Style绑定**\n数据绑定一个常见需求是操作元素的 class 列表和它的内联样式。因为它们都是属性 ，我们可以用v-bind 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 v-bind 用于 class 和 style 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。\n```\n<div v-bind:class=\"{ active: isActive }\"></div>\n\n//直接绑定数据里的一个对象\n<div v-bind:class=\"classObject\"></div>\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n\n//可以把一个数组传给 v-bind:class\n<div v-bind:class=\"[activeClass, errorClass]\">\n\n//用在组件上\n//当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖\nVue.component('my-component', {\n  template: '<p class=\"foo bar\">Hi</p>'\n})\n<my-component class=\"baz boo\"></my-component>\n//HTML 最终将被渲染成为:\n<p class=\"foo bar baz boo\">Hi</p>\n```\nv-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。\n```\n//CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n\n//直接绑定到一个样式对象通常更好，让模板更清晰\n<div v-bind:style=\"styleObject\"></div>\ndata: {\n  styleObject: {\n    color: 'red',\n    fontSize: '13px'\n  }\n}\n\n//v-bind:style 的数组语法可以将多个样式对象应用到一个元素上\n<div v-bind:style=\"[baseStyles, overridingStyles]\">\n\n//当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀\n```\n\n#### 条件渲染\n单个语句\n`<h1 v-if=\"ok\">Yes</h1>`\n多条语句时，我们可以把一个 `<template>` 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。\n\n```\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\nif-else\n\n```\n<div v-if=\"type === 'A'\">A</div>\n<div v-else-if=\"type === 'B'\">B</div>\n<div v-else>C</div>\n```\n另一个根据条件展示元素的选项是 v-show 指令。不同的是有 v-show 的元素会始终渲染并保持在 DOM 中。v-show 是简单的切换元素的 CSS 属性 display 。注意 v-show 不支持 `<template>` 语法。\n`<h1 v-show=\"ok\">Hello!</h1>`\n\n> v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变则使用 v-if 较好。\n\n#### 列表渲染\nv-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。\n```\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\"></li>\n  </template>\n</ul>\n```\n可以用 v-for 通过一个对象的属性来迭代\n```\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n或\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }} : {{ value }}\n</div>\n```\nv-for 也可以取整数。在这种情况下，它将重复多次模板:\n```\n<div>\n  <span v-for=\"n in 10\">{{ n }}</span>\n</div>\n```\n你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：\n`<div v-for=\"item of items\"></div>`\n组件中使用v-for：\n```\n<my-component\n  v-for=\"(item, index) in items\"\n  v-bind:item=\"item\"\n  v-bind:index=\"index\">\n</my-component>\n```\n\n#### 监听事件\nv-on 指令，它用于监听 DOM 事件：\n```\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n监听事件可以用修饰符指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：\n`<form v-on:submit.prevent=\"onSubmit\"></form>`\n**其他修饰符：**\n```\n.stop\n.prevent\n.capture\n.self\n.once\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n**按键修饰符**\n```\n.enter\n.tab\n.delete (捕获 “删除” 和 “退格” 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n```\n可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应:\n```\n.ctrl\n.alt\n.shift\n.meta\n<!-- Alt + C -->\n<input @keyup.alt.67=\"clear\">\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n### 双向数据绑定\nv-model 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。\n**文本**\n```\n<input v-model=\"message\" placeholder=\"edit me\">\n<p>Message is: {{ message }}</p>\n```\n**单选**\n```\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n```\n**选择列表**\n```\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" v-bind:value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n<span>Selected: {{ selected }}</span>\n```\n**修饰符**\n```\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n\n//如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值）\n<input v-model.number=\"age\" type=\"number\">\n\n//自动过滤用户输入的首尾空格\n<input v-model.trim=\"msg\">\n```\n\n## 总结\n　　官网基础教程讲解比较详细，从介绍->安装->实际例子都比较容易懂，不知道是否因为该库是华人开发的原因文档也由华人编写？\n　　通过这次的学习可以发现Vue吸取了AngularJS(双向数据绑定、模版、指令)和React（组件、父子组件单向数据流、虚拟DOM）的思想，并融合成一种更适合开发者开发的框架。另外，该框架提供了大量方便开发的方法，如修饰符、过滤器等，免去了查找库或插件的麻烦(如React需要安装各种工具)，可以说Vue是从开发者角度去考虑的框架，开发者使用起来变得更加顺心。正因如此，我也开始对Vue产生兴趣了。\n\n## 参考\n[Vue官网教程](https://cn.vuejs.org/v2/guide/)\n\n","source":"_posts/learning-vue.md","raw":"---\ntitle: Vue学习笔记\ndate: 2017-01-03 23:53:19\ncategories: [Vue]\ntags: [Vue, 教程]\n---\n## 介绍\n　　Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。\n　　Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n　　组件思想：将界面元素抽象为一个独立可复用的小组件，父组件包含若干个子组件，用这些组件构建大型的应用，因此任何一个应用界面都可以抽象为组件树。\n![组件思想](/images/components.png)\n　　每个Vue实例在被创建之前都要经过一系列的初始化过程，例如，实例需要配置数据观测、编译模版、挂载实例到DOM、数据变化时更新DOM等，在实例的生命周期的不同阶段会调用不同的回调函数，用户可以在这些回调函数中定义自己的程序处理逻辑。\n　　生命周期图示：\n![生命周期](/images/lifecycle.png)\n## 安装\n**直接下载**\n直接下载并在html中用script应用，Vue会被注册为一个全局变量。\n[开发版本](http://vuejs.org/js/vue.js) 包含了完整的警告和调试模式\n[生成版本](http://vuejs.org/js/vue.min.js) 删除警告\n\n**NPM**\n通过npm安装最新稳定版本\n`$ npm install vue `\n\n**命令行工具**\nvue.js提供官方的命令行工具，可以快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目。\n```\n# 全局安装 vue-cli\n$ npm install -g vue-cli\n# 创建一个基于 webpack 模板的新项目\n$ vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n$ npm install\n$ npm run dev\n\n# 其他命令\n# 可以查看官方提供的模版， 如webpack-simple、bowserify、week等\n$ vue list\n```\n有前端基础的推荐使用命令行工具，它能够方便初学者快速构建各种框架工程，免去自己去查找资料的麻烦\n\n## 简单使用\n### 插值\n数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：\n`<span>Message: { {msg}}</span>`\n\n### 计算属性\n计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 message 没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n```\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n\n### 指令\n#### 绑定属性\n一些指令能接受一个“参数”，在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：\n```\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\n```\n\n**Class与Style绑定**\n数据绑定一个常见需求是操作元素的 class 列表和它的内联样式。因为它们都是属性 ，我们可以用v-bind 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 v-bind 用于 class 和 style 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。\n```\n<div v-bind:class=\"{ active: isActive }\"></div>\n\n//直接绑定数据里的一个对象\n<div v-bind:class=\"classObject\"></div>\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n\n//可以把一个数组传给 v-bind:class\n<div v-bind:class=\"[activeClass, errorClass]\">\n\n//用在组件上\n//当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖\nVue.component('my-component', {\n  template: '<p class=\"foo bar\">Hi</p>'\n})\n<my-component class=\"baz boo\"></my-component>\n//HTML 最终将被渲染成为:\n<p class=\"foo bar baz boo\">Hi</p>\n```\nv-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。\n```\n//CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n\n//直接绑定到一个样式对象通常更好，让模板更清晰\n<div v-bind:style=\"styleObject\"></div>\ndata: {\n  styleObject: {\n    color: 'red',\n    fontSize: '13px'\n  }\n}\n\n//v-bind:style 的数组语法可以将多个样式对象应用到一个元素上\n<div v-bind:style=\"[baseStyles, overridingStyles]\">\n\n//当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀\n```\n\n#### 条件渲染\n单个语句\n`<h1 v-if=\"ok\">Yes</h1>`\n多条语句时，我们可以把一个 `<template>` 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。\n\n```\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\nif-else\n\n```\n<div v-if=\"type === 'A'\">A</div>\n<div v-else-if=\"type === 'B'\">B</div>\n<div v-else>C</div>\n```\n另一个根据条件展示元素的选项是 v-show 指令。不同的是有 v-show 的元素会始终渲染并保持在 DOM 中。v-show 是简单的切换元素的 CSS 属性 display 。注意 v-show 不支持 `<template>` 语法。\n`<h1 v-show=\"ok\">Hello!</h1>`\n\n> v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变则使用 v-if 较好。\n\n#### 列表渲染\nv-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。\n```\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\"></li>\n  </template>\n</ul>\n```\n可以用 v-for 通过一个对象的属性来迭代\n```\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n或\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }} : {{ value }}\n</div>\n```\nv-for 也可以取整数。在这种情况下，它将重复多次模板:\n```\n<div>\n  <span v-for=\"n in 10\">{{ n }}</span>\n</div>\n```\n你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：\n`<div v-for=\"item of items\"></div>`\n组件中使用v-for：\n```\n<my-component\n  v-for=\"(item, index) in items\"\n  v-bind:item=\"item\"\n  v-bind:index=\"index\">\n</my-component>\n```\n\n#### 监听事件\nv-on 指令，它用于监听 DOM 事件：\n```\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n监听事件可以用修饰符指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：\n`<form v-on:submit.prevent=\"onSubmit\"></form>`\n**其他修饰符：**\n```\n.stop\n.prevent\n.capture\n.self\n.once\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n**按键修饰符**\n```\n.enter\n.tab\n.delete (捕获 “删除” 和 “退格” 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n```\n可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应:\n```\n.ctrl\n.alt\n.shift\n.meta\n<!-- Alt + C -->\n<input @keyup.alt.67=\"clear\">\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n### 双向数据绑定\nv-model 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。\n**文本**\n```\n<input v-model=\"message\" placeholder=\"edit me\">\n<p>Message is: {{ message }}</p>\n```\n**单选**\n```\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n```\n**选择列表**\n```\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" v-bind:value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n<span>Selected: {{ selected }}</span>\n```\n**修饰符**\n```\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n\n//如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值）\n<input v-model.number=\"age\" type=\"number\">\n\n//自动过滤用户输入的首尾空格\n<input v-model.trim=\"msg\">\n```\n\n## 总结\n　　官网基础教程讲解比较详细，从介绍->安装->实际例子都比较容易懂，不知道是否因为该库是华人开发的原因文档也由华人编写？\n　　通过这次的学习可以发现Vue吸取了AngularJS(双向数据绑定、模版、指令)和React（组件、父子组件单向数据流、虚拟DOM）的思想，并融合成一种更适合开发者开发的框架。另外，该框架提供了大量方便开发的方法，如修饰符、过滤器等，免去了查找库或插件的麻烦(如React需要安装各种工具)，可以说Vue是从开发者角度去考虑的框架，开发者使用起来变得更加顺心。正因如此，我也开始对Vue产生兴趣了。\n\n## 参考\n[Vue官网教程](https://cn.vuejs.org/v2/guide/)\n\n","slug":"learning-vue","published":1,"updated":"2017-03-20T16:15:45.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ibgs0900028n9zvncz1eug","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>　　Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。<br>　　Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>　　组件思想：将界面元素抽象为一个独立可复用的小组件，父组件包含若干个子组件，用这些组件构建大型的应用，因此任何一个应用界面都可以抽象为组件树。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/components.png\" alt=\"组件思想\" title=\"\">\n                </div>\n                <div class=\"image-caption\">组件思想</div>\n            </figure><br>　　每个Vue实例在被创建之前都要经过一系列的初始化过程，例如，实例需要配置数据观测、编译模版、挂载实例到DOM、数据变化时更新DOM等，在实例的生命周期的不同阶段会调用不同的回调函数，用户可以在这些回调函数中定义自己的程序处理逻辑。<br>　　生命周期图示：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/lifecycle.png\" alt=\"生命周期\" title=\"\">\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>直接下载</strong><br>直接下载并在html中用script应用，Vue会被注册为一个全局变量。<br><a href=\"http://vuejs.org/js/vue.js\" target=\"_blank\" rel=\"external\">开发版本</a> 包含了完整的警告和调试模式<br><a href=\"http://vuejs.org/js/vue.min.js\" target=\"_blank\" rel=\"external\">生成版本</a> 删除警告</p>\n<p><strong>NPM</strong><br>通过npm安装最新稳定版本<br><code>$ npm install vue</code></p>\n<p><strong>命令行工具</strong><br>vue.js提供官方的命令行工具，可以快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 全局安装 vue-cli</div><div class=\"line\">$ npm install -g vue-cli</div><div class=\"line\"># 创建一个基于 webpack 模板的新项目</div><div class=\"line\">$ vue init webpack my-project</div><div class=\"line\"># 安装依赖，走你</div><div class=\"line\">$ cd my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div><div class=\"line\"></div><div class=\"line\"># 其他命令</div><div class=\"line\"># 可以查看官方提供的模版， 如webpack-simple、bowserify、week等</div><div class=\"line\">$ vue list</div></pre></td></tr></table></figure></p>\n<p>有前端基础的推荐使用命令行工具，它能够方便初学者快速构建各种框架工程，免去自己去查找资料的麻烦</p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：<br><code>&lt;span&gt;Message: { {msg}}&lt;/span&gt;</code></p>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 message 没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;example&quot;&gt;</div><div class=\"line\">  &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">  &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">var vm = new Vue(&#123;</div><div class=\"line\">  el: &apos;#example&apos;,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    message: &apos;Hello&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  computed: &#123;</div><div class=\"line\">    // a computed getter</div><div class=\"line\">    reversedMessage: function () &#123;</div><div class=\"line\">      // `this` points to the vm instance</div><div class=\"line\">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><h4 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h4><p>一些指令能接受一个“参数”，在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Class与Style绑定</strong><br>数据绑定一个常见需求是操作元素的 class 列表和它的内联样式。因为它们都是属性 ，我们可以用v-bind 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 v-bind 用于 class 和 style 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">//直接绑定数据里的一个对象</div><div class=\"line\">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</div><div class=\"line\">data: &#123;</div><div class=\"line\">  classObject: &#123;</div><div class=\"line\">    active: true,</div><div class=\"line\">    &apos;text-danger&apos;: false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//可以把一个数组传给 v-bind:class</div><div class=\"line\">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//用在组件上</div><div class=\"line\">//当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖</div><div class=\"line\">Vue.component(&apos;my-component&apos;, &#123;</div><div class=\"line\">  template: &apos;&lt;p class=&quot;foo bar&quot;&gt;Hi&lt;/p&gt;&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">&lt;my-component class=&quot;baz boo&quot;&gt;&lt;/my-component&gt;</div><div class=\"line\">//HTML 最终将被渲染成为:</div><div class=\"line\">&lt;p class=&quot;foo bar baz boo&quot;&gt;Hi&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>v-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：</div><div class=\"line\">&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">//直接绑定到一个样式对象通常更好，让模板更清晰</div><div class=\"line\">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</div><div class=\"line\">data: &#123;</div><div class=\"line\">  styleObject: &#123;</div><div class=\"line\">    color: &apos;red&apos;,</div><div class=\"line\">    fontSize: &apos;13px&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//v-bind:style 的数组语法可以将多个样式对象应用到一个元素上</div><div class=\"line\">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀</div></pre></td></tr></table></figure></p>\n<h4 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h4><p>单个语句<br><code>&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</code><br>多条语句时，我们可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template v-if=&quot;ok&quot;&gt;</div><div class=\"line\">  &lt;h1&gt;Title&lt;/h1&gt;</div><div class=\"line\">  &lt;p&gt;Paragraph 1&lt;/p&gt;</div><div class=\"line\">  &lt;p&gt;Paragraph 2&lt;/p&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure>\n<p>if-else</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;A&lt;/div&gt;</div><div class=\"line\">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;B&lt;/div&gt;</div><div class=\"line\">&lt;div v-else&gt;C&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>另一个根据条件展示元素的选项是 v-show 指令。不同的是有 v-show 的元素会始终渲染并保持在 DOM 中。v-show 是简单的切换元素的 CSS 属性 display 。注意 v-show 不支持 <code>&lt;template&gt;</code> 语法。<br><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code></p>\n<blockquote>\n<p>v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变则使用 v-if 较好。</p>\n</blockquote>\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><p>v-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;template v-for=&quot;item in items&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</div><div class=\"line\">    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;/template&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<p>可以用 v-for 通过一个对象的属性来迭代<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;repeat-object&quot; class=&quot;demo&quot;&gt;</div><div class=\"line\">  &lt;li v-for=&quot;value in object&quot;&gt;</div><div class=\"line\">    &#123;&#123; value &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">或</div><div class=\"line\">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</div><div class=\"line\">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>v-for 也可以取整数。在这种情况下，它将重复多次模板:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：<br><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code><br>组件中使用v-for：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;my-component</div><div class=\"line\">  v-for=&quot;(item, index) in items&quot;</div><div class=\"line\">  v-bind:item=&quot;item&quot;</div><div class=\"line\">  v-bind:index=&quot;index&quot;&gt;</div><div class=\"line\">&lt;/my-component&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h4><p>v-on 指令，它用于监听 DOM 事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>监听事件可以用修饰符指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code><br><strong>其他修饰符：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.stop</div><div class=\"line\">.prevent</div><div class=\"line\">.capture</div><div class=\"line\">.self</div><div class=\"line\">.once</div><div class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</div><div class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 只有修饰符 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</div><div class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>按键修饰符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.enter</div><div class=\"line\">.tab</div><div class=\"line\">.delete (捕获 “删除” 和 “退格” 键)</div><div class=\"line\">.esc</div><div class=\"line\">.space</div><div class=\"line\">.up</div><div class=\"line\">.down</div><div class=\"line\">.left</div><div class=\"line\">.right</div><div class=\"line\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 同上 --&gt;</div><div class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ctrl</div><div class=\"line\">.alt</div><div class=\"line\">.shift</div><div class=\"line\">.meta</div><div class=\"line\">&lt;!-- Alt + C --&gt;</div><div class=\"line\">&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</div><div class=\"line\">&lt;!-- Ctrl + Click --&gt;</div><div class=\"line\">&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><p>v-model 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。<br><strong>文本</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</div><div class=\"line\">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>单选</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</div><div class=\"line\">&lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</div><div class=\"line\">&lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>选择列表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select v-model=&quot;selected&quot;&gt;</div><div class=\"line\">  &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt;</div><div class=\"line\">    &#123;&#123; option.text &#125;&#125;</div><div class=\"line\">  &lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">&lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>修饰符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class=\"line\">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">//如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值）</div><div class=\"line\">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//自动过滤用户输入的首尾空格</div><div class=\"line\">&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　官网基础教程讲解比较详细，从介绍-&gt;安装-&gt;实际例子都比较容易懂，不知道是否因为该库是华人开发的原因文档也由华人编写？<br>　　通过这次的学习可以发现Vue吸取了AngularJS(双向数据绑定、模版、指令)和React（组件、父子组件单向数据流、虚拟DOM）的思想，并融合成一种更适合开发者开发的框架。另外，该框架提供了大量方便开发的方法，如修饰符、过滤器等，免去了查找库或插件的麻烦(如React需要安装各种工具)，可以说Vue是从开发者角度去考虑的框架，开发者使用起来变得更加顺心。正因如此，我也开始对Vue产生兴趣了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"external\">Vue官网教程</a></p>\n","excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>　　Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。<br>　　Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>　　组件思想：将界面元素抽象为一个独立可复用的小组件，父组件包含若干个子组件，用这些组件构建大型的应用，因此任何一个应用界面都可以抽象为组件树。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/components.png\" alt=\"组件思想\" title=\"\">\n                </div>\n                <div class=\"image-caption\">组件思想</div>\n            </figure><br>　　每个Vue实例在被创建之前都要经过一系列的初始化过程，例如，实例需要配置数据观测、编译模版、挂载实例到DOM、数据变化时更新DOM等，在实例的生命周期的不同阶段会调用不同的回调函数，用户可以在这些回调函数中定义自己的程序处理逻辑。<br>　　生命周期图示：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/lifecycle.png\" alt=\"生命周期\" title=\"\">\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>直接下载</strong><br>直接下载并在html中用script应用，Vue会被注册为一个全局变量。<br><a href=\"http://vuejs.org/js/vue.js\">开发版本</a> 包含了完整的警告和调试模式<br><a href=\"http://vuejs.org/js/vue.min.js\">生成版本</a> 删除警告</p>\n<p><strong>NPM</strong><br>通过npm安装最新稳定版本<br><code>$ npm install vue</code></p>\n<p><strong>命令行工具</strong><br>vue.js提供官方的命令行工具，可以快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 全局安装 vue-cli</div><div class=\"line\">$ npm install -g vue-cli</div><div class=\"line\"># 创建一个基于 webpack 模板的新项目</div><div class=\"line\">$ vue init webpack my-project</div><div class=\"line\"># 安装依赖，走你</div><div class=\"line\">$ cd my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div><div class=\"line\"></div><div class=\"line\"># 其他命令</div><div class=\"line\"># 可以查看官方提供的模版， 如webpack-simple、bowserify、week等</div><div class=\"line\">$ vue list</div></pre></td></tr></table></figure></p>\n<p>有前端基础的推荐使用命令行工具，它能够方便初学者快速构建各种框架工程，免去自己去查找资料的麻烦</p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：<br><code>&lt;span&gt;Message: { {msg}}&lt;/span&gt;</code></p>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 message 没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;example&quot;&gt;</div><div class=\"line\">  &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">  &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">var vm = new Vue(&#123;</div><div class=\"line\">  el: &apos;#example&apos;,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    message: &apos;Hello&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  computed: &#123;</div><div class=\"line\">    // a computed getter</div><div class=\"line\">    reversedMessage: function () &#123;</div><div class=\"line\">      // `this` points to the vm instance</div><div class=\"line\">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><h4 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h4><p>一些指令能接受一个“参数”，在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Class与Style绑定</strong><br>数据绑定一个常见需求是操作元素的 class 列表和它的内联样式。因为它们都是属性 ，我们可以用v-bind 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 v-bind 用于 class 和 style 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">//直接绑定数据里的一个对象</div><div class=\"line\">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</div><div class=\"line\">data: &#123;</div><div class=\"line\">  classObject: &#123;</div><div class=\"line\">    active: true,</div><div class=\"line\">    &apos;text-danger&apos;: false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//可以把一个数组传给 v-bind:class</div><div class=\"line\">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//用在组件上</div><div class=\"line\">//当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖</div><div class=\"line\">Vue.component(&apos;my-component&apos;, &#123;</div><div class=\"line\">  template: &apos;&lt;p class=&quot;foo bar&quot;&gt;Hi&lt;/p&gt;&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">&lt;my-component class=&quot;baz boo&quot;&gt;&lt;/my-component&gt;</div><div class=\"line\">//HTML 最终将被渲染成为:</div><div class=\"line\">&lt;p class=&quot;foo bar baz boo&quot;&gt;Hi&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>v-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：</div><div class=\"line\">&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">//直接绑定到一个样式对象通常更好，让模板更清晰</div><div class=\"line\">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</div><div class=\"line\">data: &#123;</div><div class=\"line\">  styleObject: &#123;</div><div class=\"line\">    color: &apos;red&apos;,</div><div class=\"line\">    fontSize: &apos;13px&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//v-bind:style 的数组语法可以将多个样式对象应用到一个元素上</div><div class=\"line\">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀</div></pre></td></tr></table></figure></p>\n<h4 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h4><p>单个语句<br><code>&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</code><br>多条语句时，我们可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template v-if=&quot;ok&quot;&gt;</div><div class=\"line\">  &lt;h1&gt;Title&lt;/h1&gt;</div><div class=\"line\">  &lt;p&gt;Paragraph 1&lt;/p&gt;</div><div class=\"line\">  &lt;p&gt;Paragraph 2&lt;/p&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure>\n<p>if-else</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;A&lt;/div&gt;</div><div class=\"line\">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;B&lt;/div&gt;</div><div class=\"line\">&lt;div v-else&gt;C&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>另一个根据条件展示元素的选项是 v-show 指令。不同的是有 v-show 的元素会始终渲染并保持在 DOM 中。v-show 是简单的切换元素的 CSS 属性 display 。注意 v-show 不支持 <code>&lt;template&gt;</code> 语法。<br><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code></p>\n<blockquote>\n<p>v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变则使用 v-if 较好。</p>\n</blockquote>\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><p>v-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;template v-for=&quot;item in items&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</div><div class=\"line\">    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;/template&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<p>可以用 v-for 通过一个对象的属性来迭代<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;repeat-object&quot; class=&quot;demo&quot;&gt;</div><div class=\"line\">  &lt;li v-for=&quot;value in object&quot;&gt;</div><div class=\"line\">    &#123;&#123; value &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">或</div><div class=\"line\">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</div><div class=\"line\">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>v-for 也可以取整数。在这种情况下，它将重复多次模板:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：<br><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code><br>组件中使用v-for：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;my-component</div><div class=\"line\">  v-for=&quot;(item, index) in items&quot;</div><div class=\"line\">  v-bind:item=&quot;item&quot;</div><div class=\"line\">  v-bind:index=&quot;index&quot;&gt;</div><div class=\"line\">&lt;/my-component&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h4><p>v-on 指令，它用于监听 DOM 事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>监听事件可以用修饰符指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code><br><strong>其他修饰符：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.stop</div><div class=\"line\">.prevent</div><div class=\"line\">.capture</div><div class=\"line\">.self</div><div class=\"line\">.once</div><div class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</div><div class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 只有修饰符 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</div><div class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>按键修饰符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.enter</div><div class=\"line\">.tab</div><div class=\"line\">.delete (捕获 “删除” 和 “退格” 键)</div><div class=\"line\">.esc</div><div class=\"line\">.space</div><div class=\"line\">.up</div><div class=\"line\">.down</div><div class=\"line\">.left</div><div class=\"line\">.right</div><div class=\"line\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 同上 --&gt;</div><div class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ctrl</div><div class=\"line\">.alt</div><div class=\"line\">.shift</div><div class=\"line\">.meta</div><div class=\"line\">&lt;!-- Alt + C --&gt;</div><div class=\"line\">&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</div><div class=\"line\">&lt;!-- Ctrl + Click --&gt;</div><div class=\"line\">&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><p>v-model 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。<br><strong>文本</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</div><div class=\"line\">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>单选</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</div><div class=\"line\">&lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</div><div class=\"line\">&lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>选择列表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select v-model=&quot;selected&quot;&gt;</div><div class=\"line\">  &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt;</div><div class=\"line\">    &#123;&#123; option.text &#125;&#125;</div><div class=\"line\">  &lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">&lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>修饰符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class=\"line\">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">//如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值）</div><div class=\"line\">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//自动过滤用户输入的首尾空格</div><div class=\"line\">&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　官网基础教程讲解比较详细，从介绍-&gt;安装-&gt;实际例子都比较容易懂，不知道是否因为该库是华人开发的原因文档也由华人编写？<br>　　通过这次的学习可以发现Vue吸取了AngularJS(双向数据绑定、模版、指令)和React（组件、父子组件单向数据流、虚拟DOM）的思想，并融合成一种更适合开发者开发的框架。另外，该框架提供了大量方便开发的方法，如修饰符、过滤器等，免去了查找库或插件的麻烦(如React需要安装各种工具)，可以说Vue是从开发者角度去考虑的框架，开发者使用起来变得更加顺心。正因如此，我也开始对Vue产生兴趣了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://cn.vuejs.org/v2/guide/\">Vue官网教程</a></p>\n"},{"title":"Hexo + Github Pages建博客","date":"2016-12-26T13:35:49.000Z","_content":"## 前言\n作为一个有理想的程序员都希望自己弄一个属于自己的博客，当然我也不例外哈～平时查找相关资料或解决问题的时候就看到各种牛人们的博客，自己也一直想弄，但都没有太多时间去弄（借口）。\n一开始想在阿里云上弄个自己的网站然后写博客的，于是申请了两年免费的虚拟机，申请后闲置了半年才去折腾。虚拟机毕竟是虚拟机，它不支持ssh登录，不能自己安装软件，只是支持php、HTML、WAP，php、wap都不太懂。云服务器又不舍得买，也就只好安装wordpress来搭建博客，安装完选好主题之后，发现wordpress不太好用，感觉条条框框的较多，也就又搁置了一段时间。最后，在网上看到可以用hexo+githubpages搭建，也就又开始折腾了。\nhexo+githubpages比较好的地方：\n+ 根据Markdown文件直接生成静态的html\n+ [主题](https://hexo.io/themes/)可以自己选择，并可以直接修改主题代码\n+ 完全免费\n\n## 安装及基本用法\nhexo[官网教程](https://hexo.io/zh-cn/docs/index.html)（[英文](https://hexo.io/docs/)）讲解都很详细的，按照文档一步步来都可以完成，网上搜到的教程很多很杂，有些教程可能是旧版本的，所以最后还是查看官网的教程，比较新，免得自己踩坑。\n**安装依赖**：\n+ [Node.js](http://nodejs.org/)\n+ [Git](http://git-scm.com/)\n\n**安装hexo**：\n```\n$ npm install -g hexo-cli```\n安装完之后可以敲下面的命令查看hexo的用法，以及验证是否安装成功：\n`$ hexo -h或--help`\n\n\n**新建博客**\n执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。若floder不存在会自动创建。\n`$ hexo init <folder>`\n**新建文章**\n新建一个题目为title的文章，新建的文件路径在source/_posts，文件名为title.md\n`$ hexo new <title>`\n**启用本地服务**\n运行下面的命令， 就可以在 localhost:4000/ 查看你的博客。\n`$ hexo server（或 s）`\n\n\n## Hexo主题\nhexo默认的是landscape主题, 可以自己安装其他主题。在主题官网上个人比较喜欢的主题是[indigo](https://github.com/yscoder/hexo-theme-indigo),这个主题的安装配置[教程](https://github.com/yscoder/hexo-theme-indigo/wiki)还是比较完善的。\n上了船之后，后来发现还有一些很不错的主题：\n+ [material](https://github.com/viosey/hexo-theme-material)\n+ [NexT](https://github.com/iissnan/hexo-theme-next)\n\n这两个教程就更完善了，不过这个还是看个人的喜好哈～\n\n官网的[主题介绍](https://hexo.io/zh-cn/docs/themes.html)相对比较简单，不过也说明了一些关键点，如：\n+ 修改主题只需修改_config.xml内的theme即可切换，前提是在themes文件夹内有这个主题\n+ 一个主题的文件结构为：\n    + _config.yml， 主题内的配置文件\n    + languages， 一些国际化的配置\n    + layout，主题的模板， 自己定制可以修改这里的模板\n    + scripts， 第三方库脚本\n    + source，样式，图片等\n\n详细的安装过程，可以参考所下载主题的安装教程，如本站的[indigo](https://github.com/yscoder/hexo-theme-indigo)。需要注意的是该主题要求Node 版本为 6.x 以上，要不然会导致一些插件编译或部署错误。\n\n\n## Github Pages部署发布\n[github pages](https://pages.github.com)是一个托管静态站点的服务，旨在能够直接从github仓库里托管个人、组织或项目页面。新建github page可以参考[官网教程](https://pages.github.com/)。\n如果有个人域名的可参考如何将[github pages绑定到个人域名](http://blog.csdn.net/lmj623565791/article/details/51319147), 绑定后访问你的域名就可以直接访问到github pages，瞬间变得高大上。\n\n**生成静态文件**\n`$ hexo generate(或g)`将md文件编译成静态网页到pulic目录下。\n``` bash\nPS： public 目录下的style.css需要删除后，在生成，否则不会覆盖，不知道是否是bug\n```\n\n**部署到git**    [官网教程](https://hexo.io/zh-cn/docs/deployment.html#Git)\n安装 hexo-deployer-git\n`$ npm install hexo-deployer-git --save`\n修改配置文件_config.xml\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message] (commit msg)\n```\n``` bash\nPS： 一些非hexo的文件也可以放在public目录下，如CNAME，README.md等，放在其他地方不能部署到github\n```\n\n## 传送门\n+ [haroopad](http://pad.haroopress.com/user.html) Markdown的编辑软件\n+ [Markdown语法及haroopad软件安装](http://blog.csdn.net/tao_627/article/details/50625436)\n+ [hexo 插件](https://github.com/hexojs/hexo/wiki/Plugins)\n\n","source":"_posts/Hexo+GithubPages博客.md","raw":"---\ntitle: Hexo + Github Pages建博客\ndate: 2016-12-26 21:35:49\ncategories: [教程]\ntags: [hexo, 教程]\n---\n## 前言\n作为一个有理想的程序员都希望自己弄一个属于自己的博客，当然我也不例外哈～平时查找相关资料或解决问题的时候就看到各种牛人们的博客，自己也一直想弄，但都没有太多时间去弄（借口）。\n一开始想在阿里云上弄个自己的网站然后写博客的，于是申请了两年免费的虚拟机，申请后闲置了半年才去折腾。虚拟机毕竟是虚拟机，它不支持ssh登录，不能自己安装软件，只是支持php、HTML、WAP，php、wap都不太懂。云服务器又不舍得买，也就只好安装wordpress来搭建博客，安装完选好主题之后，发现wordpress不太好用，感觉条条框框的较多，也就又搁置了一段时间。最后，在网上看到可以用hexo+githubpages搭建，也就又开始折腾了。\nhexo+githubpages比较好的地方：\n+ 根据Markdown文件直接生成静态的html\n+ [主题](https://hexo.io/themes/)可以自己选择，并可以直接修改主题代码\n+ 完全免费\n\n## 安装及基本用法\nhexo[官网教程](https://hexo.io/zh-cn/docs/index.html)（[英文](https://hexo.io/docs/)）讲解都很详细的，按照文档一步步来都可以完成，网上搜到的教程很多很杂，有些教程可能是旧版本的，所以最后还是查看官网的教程，比较新，免得自己踩坑。\n**安装依赖**：\n+ [Node.js](http://nodejs.org/)\n+ [Git](http://git-scm.com/)\n\n**安装hexo**：\n```\n$ npm install -g hexo-cli```\n安装完之后可以敲下面的命令查看hexo的用法，以及验证是否安装成功：\n`$ hexo -h或--help`\n\n\n**新建博客**\n执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。若floder不存在会自动创建。\n`$ hexo init <folder>`\n**新建文章**\n新建一个题目为title的文章，新建的文件路径在source/_posts，文件名为title.md\n`$ hexo new <title>`\n**启用本地服务**\n运行下面的命令， 就可以在 localhost:4000/ 查看你的博客。\n`$ hexo server（或 s）`\n\n\n## Hexo主题\nhexo默认的是landscape主题, 可以自己安装其他主题。在主题官网上个人比较喜欢的主题是[indigo](https://github.com/yscoder/hexo-theme-indigo),这个主题的安装配置[教程](https://github.com/yscoder/hexo-theme-indigo/wiki)还是比较完善的。\n上了船之后，后来发现还有一些很不错的主题：\n+ [material](https://github.com/viosey/hexo-theme-material)\n+ [NexT](https://github.com/iissnan/hexo-theme-next)\n\n这两个教程就更完善了，不过这个还是看个人的喜好哈～\n\n官网的[主题介绍](https://hexo.io/zh-cn/docs/themes.html)相对比较简单，不过也说明了一些关键点，如：\n+ 修改主题只需修改_config.xml内的theme即可切换，前提是在themes文件夹内有这个主题\n+ 一个主题的文件结构为：\n    + _config.yml， 主题内的配置文件\n    + languages， 一些国际化的配置\n    + layout，主题的模板， 自己定制可以修改这里的模板\n    + scripts， 第三方库脚本\n    + source，样式，图片等\n\n详细的安装过程，可以参考所下载主题的安装教程，如本站的[indigo](https://github.com/yscoder/hexo-theme-indigo)。需要注意的是该主题要求Node 版本为 6.x 以上，要不然会导致一些插件编译或部署错误。\n\n\n## Github Pages部署发布\n[github pages](https://pages.github.com)是一个托管静态站点的服务，旨在能够直接从github仓库里托管个人、组织或项目页面。新建github page可以参考[官网教程](https://pages.github.com/)。\n如果有个人域名的可参考如何将[github pages绑定到个人域名](http://blog.csdn.net/lmj623565791/article/details/51319147), 绑定后访问你的域名就可以直接访问到github pages，瞬间变得高大上。\n\n**生成静态文件**\n`$ hexo generate(或g)`将md文件编译成静态网页到pulic目录下。\n``` bash\nPS： public 目录下的style.css需要删除后，在生成，否则不会覆盖，不知道是否是bug\n```\n\n**部署到git**    [官网教程](https://hexo.io/zh-cn/docs/deployment.html#Git)\n安装 hexo-deployer-git\n`$ npm install hexo-deployer-git --save`\n修改配置文件_config.xml\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message] (commit msg)\n```\n``` bash\nPS： 一些非hexo的文件也可以放在public目录下，如CNAME，README.md等，放在其他地方不能部署到github\n```\n\n## 传送门\n+ [haroopad](http://pad.haroopress.com/user.html) Markdown的编辑软件\n+ [Markdown语法及haroopad软件安装](http://blog.csdn.net/tao_627/article/details/50625436)\n+ [hexo 插件](https://github.com/hexojs/hexo/wiki/Plugins)\n\n","slug":"Hexo+GithubPages博客","published":1,"updated":"2017-03-20T16:15:45.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ibgs0h00068n9ztir4qp55","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为一个有理想的程序员都希望自己弄一个属于自己的博客，当然我也不例外哈～平时查找相关资料或解决问题的时候就看到各种牛人们的博客，自己也一直想弄，但都没有太多时间去弄（借口）。<br>一开始想在阿里云上弄个自己的网站然后写博客的，于是申请了两年免费的虚拟机，申请后闲置了半年才去折腾。虚拟机毕竟是虚拟机，它不支持ssh登录，不能自己安装软件，只是支持php、HTML、WAP，php、wap都不太懂。云服务器又不舍得买，也就只好安装wordpress来搭建博客，安装完选好主题之后，发现wordpress不太好用，感觉条条框框的较多，也就又搁置了一段时间。最后，在网上看到可以用hexo+githubpages搭建，也就又开始折腾了。<br>hexo+githubpages比较好的地方：</p>\n<ul>\n<li>根据Markdown文件直接生成静态的html</li>\n<li><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">主题</a>可以自己选择，并可以直接修改主题代码</li>\n<li>完全免费</li>\n</ul>\n<h2 id=\"安装及基本用法\"><a href=\"#安装及基本用法\" class=\"headerlink\" title=\"安装及基本用法\"></a>安装及基本用法</h2><p>hexo<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">官网教程</a>（<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">英文</a>）讲解都很详细的，按照文档一步步来都可以完成，网上搜到的教程很多很杂，有些教程可能是旧版本的，所以最后还是查看官网的教程，比较新，免得自己踩坑。<br><strong>安装依赖</strong>：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a></li>\n</ul>\n<p><strong>安装hexo</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>安装完之后可以敲下面的命令查看hexo的用法，以及验证是否安装成功：<br><code>$ hexo -h或--help</code></p>\n<p><strong>新建博客</strong><br>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。若floder不存在会自动创建。<br><code>$ hexo init &lt;folder&gt;</code><br><strong>新建文章</strong><br>新建一个题目为title的文章，新建的文件路径在source/_posts，文件名为title.md<br><code>$ hexo new &lt;title&gt;</code><br><strong>启用本地服务</strong><br>运行下面的命令， 就可以在 localhost:4000/ 查看你的博客。<br><code>$ hexo server（或 s）</code></p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><p>hexo默认的是landscape主题, 可以自己安装其他主题。在主题官网上个人比较喜欢的主题是<a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"external\">indigo</a>,这个主题的安装配置<a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki\" target=\"_blank\" rel=\"external\">教程</a>还是比较完善的。<br>上了船之后，后来发现还有一些很不错的主题：</p>\n<ul>\n<li><a href=\"https://github.com/viosey/hexo-theme-material\" target=\"_blank\" rel=\"external\">material</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">NexT</a></li>\n</ul>\n<p>这两个教程就更完善了，不过这个还是看个人的喜好哈～</p>\n<p>官网的<a href=\"https://hexo.io/zh-cn/docs/themes.html\" target=\"_blank\" rel=\"external\">主题介绍</a>相对比较简单，不过也说明了一些关键点，如：</p>\n<ul>\n<li>修改主题只需修改_config.xml内的theme即可切换，前提是在themes文件夹内有这个主题</li>\n<li>一个主题的文件结构为：<ul>\n<li>_config.yml， 主题内的配置文件</li>\n<li>languages， 一些国际化的配置</li>\n<li>layout，主题的模板， 自己定制可以修改这里的模板</li>\n<li>scripts， 第三方库脚本</li>\n<li>source，样式，图片等</li>\n</ul>\n</li>\n</ul>\n<p>详细的安装过程，可以参考所下载主题的安装教程，如本站的<a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"external\">indigo</a>。需要注意的是该主题要求Node 版本为 6.x 以上，要不然会导致一些插件编译或部署错误。</p>\n<h2 id=\"Github-Pages部署发布\"><a href=\"#Github-Pages部署发布\" class=\"headerlink\" title=\"Github Pages部署发布\"></a>Github Pages部署发布</h2><p><a href=\"https://pages.github.com\" target=\"_blank\" rel=\"external\">github pages</a>是一个托管静态站点的服务，旨在能够直接从github仓库里托管个人、组织或项目页面。新建github page可以参考<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">官网教程</a>。<br>如果有个人域名的可参考如何将<a href=\"http://blog.csdn.net/lmj623565791/article/details/51319147\" target=\"_blank\" rel=\"external\">github pages绑定到个人域名</a>, 绑定后访问你的域名就可以直接访问到github pages，瞬间变得高大上。</p>\n<p><strong>生成静态文件</strong><br><code>$ hexo generate(或g)</code>将md文件编译成静态网页到pulic目录下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS： public 目录下的style.css需要删除后，在生成，否则不会覆盖，不知道是否是bug</div></pre></td></tr></table></figure></p>\n<p><strong>部署到git</strong>    <a href=\"https://hexo.io/zh-cn/docs/deployment.html#Git\" target=\"_blank\" rel=\"external\">官网教程</a><br>安装 hexo-deployer-git<br><code>$ npm install hexo-deployer-git --save</code><br>修改配置文件_config.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: &lt;repository url&gt;</div><div class=\"line\">  branch: [branch]</div><div class=\"line\">  message: [message] (commit msg)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS： 一些非hexo的文件也可以放在public目录下，如CNAME，README.md等，放在其他地方不能部署到github</div></pre></td></tr></table></figure>\n<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"http://pad.haroopress.com/user.html\" target=\"_blank\" rel=\"external\">haroopad</a> Markdown的编辑软件</li>\n<li><a href=\"http://blog.csdn.net/tao_627/article/details/50625436\" target=\"_blank\" rel=\"external\">Markdown语法及haroopad软件安装</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">hexo 插件</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为一个有理想的程序员都希望自己弄一个属于自己的博客，当然我也不例外哈～平时查找相关资料或解决问题的时候就看到各种牛人们的博客，自己也一直想弄，但都没有太多时间去弄（借口）。<br>一开始想在阿里云上弄个自己的网站然后写博客的，于是申请了两年免费的虚拟机，申请后闲置了半年才去折腾。虚拟机毕竟是虚拟机，它不支持ssh登录，不能自己安装软件，只是支持php、HTML、WAP，php、wap都不太懂。云服务器又不舍得买，也就只好安装wordpress来搭建博客，安装完选好主题之后，发现wordpress不太好用，感觉条条框框的较多，也就又搁置了一段时间。最后，在网上看到可以用hexo+githubpages搭建，也就又开始折腾了。<br>hexo+githubpages比较好的地方：</p>\n<ul>\n<li>根据Markdown文件直接生成静态的html</li>\n<li><a href=\"https://hexo.io/themes/\">主题</a>可以自己选择，并可以直接修改主题代码</li>\n<li>完全免费</li>\n</ul>\n<h2 id=\"安装及基本用法\"><a href=\"#安装及基本用法\" class=\"headerlink\" title=\"安装及基本用法\"></a>安装及基本用法</h2><p>hexo<a href=\"https://hexo.io/zh-cn/docs/index.html\">官网教程</a>（<a href=\"https://hexo.io/docs/\">英文</a>）讲解都很详细的，按照文档一步步来都可以完成，网上搜到的教程很多很杂，有些教程可能是旧版本的，所以最后还是查看官网的教程，比较新，免得自己踩坑。<br><strong>安装依赖</strong>：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a></li>\n<li><a href=\"http://git-scm.com/\">Git</a></li>\n</ul>\n<p><strong>安装hexo</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>安装完之后可以敲下面的命令查看hexo的用法，以及验证是否安装成功：<br><code>$ hexo -h或--help</code></p>\n<p><strong>新建博客</strong><br>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。若floder不存在会自动创建。<br><code>$ hexo init &lt;folder&gt;</code><br><strong>新建文章</strong><br>新建一个题目为title的文章，新建的文件路径在source/_posts，文件名为title.md<br><code>$ hexo new &lt;title&gt;</code><br><strong>启用本地服务</strong><br>运行下面的命令， 就可以在 localhost:4000/ 查看你的博客。<br><code>$ hexo server（或 s）</code></p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><p>hexo默认的是landscape主题, 可以自己安装其他主题。在主题官网上个人比较喜欢的主题是<a href=\"https://github.com/yscoder/hexo-theme-indigo\">indigo</a>,这个主题的安装配置<a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki\">教程</a>还是比较完善的。<br>上了船之后，后来发现还有一些很不错的主题：</p>\n<ul>\n<li><a href=\"https://github.com/viosey/hexo-theme-material\">material</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">NexT</a></li>\n</ul>\n<p>这两个教程就更完善了，不过这个还是看个人的喜好哈～</p>\n<p>官网的<a href=\"https://hexo.io/zh-cn/docs/themes.html\">主题介绍</a>相对比较简单，不过也说明了一些关键点，如：</p>\n<ul>\n<li>修改主题只需修改_config.xml内的theme即可切换，前提是在themes文件夹内有这个主题</li>\n<li>一个主题的文件结构为：<ul>\n<li>_config.yml， 主题内的配置文件</li>\n<li>languages， 一些国际化的配置</li>\n<li>layout，主题的模板， 自己定制可以修改这里的模板</li>\n<li>scripts， 第三方库脚本</li>\n<li>source，样式，图片等</li>\n</ul>\n</li>\n</ul>\n<p>详细的安装过程，可以参考所下载主题的安装教程，如本站的<a href=\"https://github.com/yscoder/hexo-theme-indigo\">indigo</a>。需要注意的是该主题要求Node 版本为 6.x 以上，要不然会导致一些插件编译或部署错误。</p>\n<h2 id=\"Github-Pages部署发布\"><a href=\"#Github-Pages部署发布\" class=\"headerlink\" title=\"Github Pages部署发布\"></a>Github Pages部署发布</h2><p><a href=\"https://pages.github.com\">github pages</a>是一个托管静态站点的服务，旨在能够直接从github仓库里托管个人、组织或项目页面。新建github page可以参考<a href=\"https://pages.github.com/\">官网教程</a>。<br>如果有个人域名的可参考如何将<a href=\"http://blog.csdn.net/lmj623565791/article/details/51319147\">github pages绑定到个人域名</a>, 绑定后访问你的域名就可以直接访问到github pages，瞬间变得高大上。</p>\n<p><strong>生成静态文件</strong><br><code>$ hexo generate(或g)</code>将md文件编译成静态网页到pulic目录下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS： public 目录下的style.css需要删除后，在生成，否则不会覆盖，不知道是否是bug</div></pre></td></tr></table></figure></p>\n<p><strong>部署到git</strong>    <a href=\"https://hexo.io/zh-cn/docs/deployment.html#Git\">官网教程</a><br>安装 hexo-deployer-git<br><code>$ npm install hexo-deployer-git --save</code><br>修改配置文件_config.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: &lt;repository url&gt;</div><div class=\"line\">  branch: [branch]</div><div class=\"line\">  message: [message] (commit msg)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS： 一些非hexo的文件也可以放在public目录下，如CNAME，README.md等，放在其他地方不能部署到github</div></pre></td></tr></table></figure>\n<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"http://pad.haroopress.com/user.html\">haroopad</a> Markdown的编辑软件</li>\n<li><a href=\"http://blog.csdn.net/tao_627/article/details/50625436\">Markdown语法及haroopad软件安装</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/wiki/Plugins\">hexo 插件</a></li>\n</ul>\n"},{"title":"资源收集","date":"2017-01-01T14:13:15.000Z","_content":"\n## 工具库\n1. [FullPage](http://alvarotrigo.com/fullPage/) 非常好用的全屏滑动库, 有挺多Example\n2. [Hexo](https://github.com/hexojs/hexo) Markdown生成静态页面，可做博客\n3. [hexo-theme-material](https://github.com/viosey/hexo-theme-material) Material主题的样式，作者非常用心，挺好看的主题，教程完整\n4. [hexo-theme-next](https://github.com/iissnan/hexo-theme-next) NexT主题样式，比较经典，教程齐全\n5. [lib-flexible](https://github.com/amfe/lib-flexible) 阿里移动端多分辨率的兼容方案(rem)\n6. [TinyPng](https://github.com/GcsSloop/TinyPng) 图片批量压缩脚本(Python)\n7. [Swiper](https://github.com/nolimits4web/Swiper) 针对移动端触摸屏的滑屏插件，兼容iOS，Android，WP8和桌面浏览器\n8. [CreateJs](https://github.com/CreateJS/EaselJS) H5制作动画的库\n9. [React-dotdotdot](https://github.com/CezaryDanielNowak/React-dotdotdot) 多行出现点点点的解决方法\n10. [viewjs](https://github.com/fengyuanchen/viewerjs) 查看图片的插件，功能强大\n11. [video.js](https://github.com/videojs/video.js) 功能非常强大的视频音频播放库，可以自定义皮肤\n\n## 收集汇总\n1. [前端收集](https://github.com/foru17/front-end-collect) 前端开发相关的优秀网站、博客、以及活跃开发者\n2. [前端技能汇总](https://github.com/JacksonTian/fks) 前端技能汇总，包含前端知识架构，书籍推荐\n3. [Front-end-tutorial ](https://github.com/windiest/Front-end-tutorial) 最全的资源教程-前端涉及的所有知识体系\n4. [Front-end-Interview-questions](https://github.com/hawx1993/Front-end-Interview-questions) 史上最全前端开发面试问题及答案\n\n## 样式\n1. [Semantic-UI](https://github.com/Semantic-Org/Semantic-UI) 让你使用任何HTML标签 来表现UI控件。这是一款语义化设计的前端框架，为攻城师而制作的可复用的开源前端框架\n2. [animate.css](https://github.com/daneden/animate.css) 动画样式\n\n## 其他\n1. [机器学习](https://github.com/ZuzooVn/machine-learning-for-software-engineers) 资料很全\n\n\n","source":"_posts/resource-collection.md","raw":"---\ntitle: 资源收集\ndate: 2017-01-01 22:13:15\ncategories: [资源]\ntags: [资源]\n---\n\n## 工具库\n1. [FullPage](http://alvarotrigo.com/fullPage/) 非常好用的全屏滑动库, 有挺多Example\n2. [Hexo](https://github.com/hexojs/hexo) Markdown生成静态页面，可做博客\n3. [hexo-theme-material](https://github.com/viosey/hexo-theme-material) Material主题的样式，作者非常用心，挺好看的主题，教程完整\n4. [hexo-theme-next](https://github.com/iissnan/hexo-theme-next) NexT主题样式，比较经典，教程齐全\n5. [lib-flexible](https://github.com/amfe/lib-flexible) 阿里移动端多分辨率的兼容方案(rem)\n6. [TinyPng](https://github.com/GcsSloop/TinyPng) 图片批量压缩脚本(Python)\n7. [Swiper](https://github.com/nolimits4web/Swiper) 针对移动端触摸屏的滑屏插件，兼容iOS，Android，WP8和桌面浏览器\n8. [CreateJs](https://github.com/CreateJS/EaselJS) H5制作动画的库\n9. [React-dotdotdot](https://github.com/CezaryDanielNowak/React-dotdotdot) 多行出现点点点的解决方法\n10. [viewjs](https://github.com/fengyuanchen/viewerjs) 查看图片的插件，功能强大\n11. [video.js](https://github.com/videojs/video.js) 功能非常强大的视频音频播放库，可以自定义皮肤\n\n## 收集汇总\n1. [前端收集](https://github.com/foru17/front-end-collect) 前端开发相关的优秀网站、博客、以及活跃开发者\n2. [前端技能汇总](https://github.com/JacksonTian/fks) 前端技能汇总，包含前端知识架构，书籍推荐\n3. [Front-end-tutorial ](https://github.com/windiest/Front-end-tutorial) 最全的资源教程-前端涉及的所有知识体系\n4. [Front-end-Interview-questions](https://github.com/hawx1993/Front-end-Interview-questions) 史上最全前端开发面试问题及答案\n\n## 样式\n1. [Semantic-UI](https://github.com/Semantic-Org/Semantic-UI) 让你使用任何HTML标签 来表现UI控件。这是一款语义化设计的前端框架，为攻城师而制作的可复用的开源前端框架\n2. [animate.css](https://github.com/daneden/animate.css) 动画样式\n\n## 其他\n1. [机器学习](https://github.com/ZuzooVn/machine-learning-for-software-engineers) 资料很全\n\n\n","slug":"resource-collection","published":1,"updated":"2017-03-20T16:15:45.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ibgs0k00088n9zxnaexili","content":"<h2 id=\"工具库\"><a href=\"#工具库\" class=\"headerlink\" title=\"工具库\"></a>工具库</h2><ol>\n<li><a href=\"http://alvarotrigo.com/fullPage/\" target=\"_blank\" rel=\"external\">FullPage</a> 非常好用的全屏滑动库, 有挺多Example</li>\n<li><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">Hexo</a> Markdown生成静态页面，可做博客</li>\n<li><a href=\"https://github.com/viosey/hexo-theme-material\" target=\"_blank\" rel=\"external\">hexo-theme-material</a> Material主题的样式，作者非常用心，挺好看的主题，教程完整</li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">hexo-theme-next</a> NexT主题样式，比较经典，教程齐全</li>\n<li><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"external\">lib-flexible</a> 阿里移动端多分辨率的兼容方案(rem)</li>\n<li><a href=\"https://github.com/GcsSloop/TinyPng\" target=\"_blank\" rel=\"external\">TinyPng</a> 图片批量压缩脚本(Python)</li>\n<li><a href=\"https://github.com/nolimits4web/Swiper\" target=\"_blank\" rel=\"external\">Swiper</a> 针对移动端触摸屏的滑屏插件，兼容iOS，Android，WP8和桌面浏览器</li>\n<li><a href=\"https://github.com/CreateJS/EaselJS\" target=\"_blank\" rel=\"external\">CreateJs</a> H5制作动画的库</li>\n<li><a href=\"https://github.com/CezaryDanielNowak/React-dotdotdot\" target=\"_blank\" rel=\"external\">React-dotdotdot</a> 多行出现点点点的解决方法</li>\n<li><a href=\"https://github.com/fengyuanchen/viewerjs\" target=\"_blank\" rel=\"external\">viewjs</a> 查看图片的插件，功能强大</li>\n<li><a href=\"https://github.com/videojs/video.js\" target=\"_blank\" rel=\"external\">video.js</a> 功能非常强大的视频音频播放库，可以自定义皮肤</li>\n</ol>\n<h2 id=\"收集汇总\"><a href=\"#收集汇总\" class=\"headerlink\" title=\"收集汇总\"></a>收集汇总</h2><ol>\n<li><a href=\"https://github.com/foru17/front-end-collect\" target=\"_blank\" rel=\"external\">前端收集</a> 前端开发相关的优秀网站、博客、以及活跃开发者</li>\n<li><a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"external\">前端技能汇总</a> 前端技能汇总，包含前端知识架构，书籍推荐</li>\n<li><a href=\"https://github.com/windiest/Front-end-tutorial\" target=\"_blank\" rel=\"external\">Front-end-tutorial </a> 最全的资源教程-前端涉及的所有知识体系</li>\n<li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\" target=\"_blank\" rel=\"external\">Front-end-Interview-questions</a> 史上最全前端开发面试问题及答案</li>\n</ol>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><ol>\n<li><a href=\"https://github.com/Semantic-Org/Semantic-UI\" target=\"_blank\" rel=\"external\">Semantic-UI</a> 让你使用任何HTML标签 来表现UI控件。这是一款语义化设计的前端框架，为攻城师而制作的可复用的开源前端框架</li>\n<li><a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"external\">animate.css</a> 动画样式</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><a href=\"https://github.com/ZuzooVn/machine-learning-for-software-engineers\" target=\"_blank\" rel=\"external\">机器学习</a> 资料很全</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"工具库\"><a href=\"#工具库\" class=\"headerlink\" title=\"工具库\"></a>工具库</h2><ol>\n<li><a href=\"http://alvarotrigo.com/fullPage/\">FullPage</a> 非常好用的全屏滑动库, 有挺多Example</li>\n<li><a href=\"https://github.com/hexojs/hexo\">Hexo</a> Markdown生成静态页面，可做博客</li>\n<li><a href=\"https://github.com/viosey/hexo-theme-material\">hexo-theme-material</a> Material主题的样式，作者非常用心，挺好看的主题，教程完整</li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a> NexT主题样式，比较经典，教程齐全</li>\n<li><a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 阿里移动端多分辨率的兼容方案(rem)</li>\n<li><a href=\"https://github.com/GcsSloop/TinyPng\">TinyPng</a> 图片批量压缩脚本(Python)</li>\n<li><a href=\"https://github.com/nolimits4web/Swiper\">Swiper</a> 针对移动端触摸屏的滑屏插件，兼容iOS，Android，WP8和桌面浏览器</li>\n<li><a href=\"https://github.com/CreateJS/EaselJS\">CreateJs</a> H5制作动画的库</li>\n<li><a href=\"https://github.com/CezaryDanielNowak/React-dotdotdot\">React-dotdotdot</a> 多行出现点点点的解决方法</li>\n<li><a href=\"https://github.com/fengyuanchen/viewerjs\">viewjs</a> 查看图片的插件，功能强大</li>\n<li><a href=\"https://github.com/videojs/video.js\">video.js</a> 功能非常强大的视频音频播放库，可以自定义皮肤</li>\n</ol>\n<h2 id=\"收集汇总\"><a href=\"#收集汇总\" class=\"headerlink\" title=\"收集汇总\"></a>收集汇总</h2><ol>\n<li><a href=\"https://github.com/foru17/front-end-collect\">前端收集</a> 前端开发相关的优秀网站、博客、以及活跃开发者</li>\n<li><a href=\"https://github.com/JacksonTian/fks\">前端技能汇总</a> 前端技能汇总，包含前端知识架构，书籍推荐</li>\n<li><a href=\"https://github.com/windiest/Front-end-tutorial\">Front-end-tutorial </a> 最全的资源教程-前端涉及的所有知识体系</li>\n<li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\">Front-end-Interview-questions</a> 史上最全前端开发面试问题及答案</li>\n</ol>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><ol>\n<li><a href=\"https://github.com/Semantic-Org/Semantic-UI\">Semantic-UI</a> 让你使用任何HTML标签 来表现UI控件。这是一款语义化设计的前端框架，为攻城师而制作的可复用的开源前端框架</li>\n<li><a href=\"https://github.com/daneden/animate.css\">animate.css</a> 动画样式</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><a href=\"https://github.com/ZuzooVn/machine-learning-for-software-engineers\">机器学习</a> 资料很全</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0ibgs0300008n9zl0ko7rip","category_id":"cj0ibgs0c00048n9zeqx5pf7v","_id":"cj0ibgs0q000b8n9zzsmsda4j"},{"post_id":"cj0ibgs0900028n9zvncz1eug","category_id":"cj0ibgs0o00098n9z69e235n6","_id":"cj0ibgs0r000f8n9z7fh3l8wq"},{"post_id":"cj0ibgs0h00068n9ztir4qp55","category_id":"cj0ibgs0q000c8n9z4k0hvdv9","_id":"cj0ibgs0s000j8n9zqn8epbn5"},{"post_id":"cj0ibgs0k00088n9zxnaexili","category_id":"cj0ibgs0r000h8n9z0qnbghup","_id":"cj0ibgs0t000m8n9zg43hxxk7"}],"PostTag":[{"post_id":"cj0ibgs0300008n9zl0ko7rip","tag_id":"cj0ibgs0g00058n9z4rv4j0cx","_id":"cj0ibgs0r000e8n9zvqibwzsg"},{"post_id":"cj0ibgs0300008n9zl0ko7rip","tag_id":"cj0ibgs0o000a8n9zio4qbcq4","_id":"cj0ibgs0r000g8n9zh3g2p45d"},{"post_id":"cj0ibgs0900028n9zvncz1eug","tag_id":"cj0ibgs0q000d8n9znby2wryy","_id":"cj0ibgs0t000l8n9zdj5kdta1"},{"post_id":"cj0ibgs0900028n9zvncz1eug","tag_id":"cj0ibgs0s000i8n9z4sran4gq","_id":"cj0ibgs0t000n8n9zeamhciwl"},{"post_id":"cj0ibgs0h00068n9ztir4qp55","tag_id":"cj0ibgs0s000k8n9zt9jbrcrf","_id":"cj0ibgs0w000q8n9z989vdrqu"},{"post_id":"cj0ibgs0h00068n9ztir4qp55","tag_id":"cj0ibgs0s000i8n9z4sran4gq","_id":"cj0ibgs0w000r8n9zhif7hc8f"},{"post_id":"cj0ibgs0k00088n9zxnaexili","tag_id":"cj0ibgs0v000p8n9zdu175mu6","_id":"cj0ibgs0x000s8n9z7k0h5xo5"}],"Tag":[{"name":"API","_id":"cj0ibgs0g00058n9z4rv4j0cx"},{"name":"DOM","_id":"cj0ibgs0o000a8n9zio4qbcq4"},{"name":"Vue","_id":"cj0ibgs0q000d8n9znby2wryy"},{"name":"教程","_id":"cj0ibgs0s000i8n9z4sran4gq"},{"name":"hexo","_id":"cj0ibgs0s000k8n9zt9jbrcrf"},{"name":"资源","_id":"cj0ibgs0v000p8n9zdu175mu6"}]}}